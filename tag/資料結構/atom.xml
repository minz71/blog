<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.minz.li</id>
    <title>minz的筆記本 • Posts by &#34;資料結構&#34; tag</title>
    <link href="https://blog.minz.li" />
    <updated>2023-11-01T16:00:00.000Z</updated>
    <category term="Groq" />
    <category term="Cerebras" />
    <category term="SambaNova" />
    <category term="Deepseek" />
    <category term="llama" />
    <category term="llm" />
    <category term="benchmark" />
    <category term="LMSYS" />
    <category term="Chatbot Arena" />
    <category term="livebench" />
    <category term="aider" />
    <category term="Claude" />
    <category term="Anthropic" />
    <category term="Open-webui" />
    <category term="Custom" />
    <category term="API" />
    <category term="diskpart" />
    <category term="物件導向" />
    <category term="演算法" />
    <category term="資料結構" />
    <category term="離散數學" />
    <category term="線性代數" />
    <category term="程式碼" />
    <category term="大學課程" />
    <category term="機率與統計" />
    <category term="Docker" />
    <category term="DevOps" />
    <category term="WSL" />
    <category term="mora" />
    <category term="Hi-res" />
    <category term="音樂" />
    <category term="Netflix" />
    <category term="Netflix共享" />
    <category term="Github Action" />
    <category term="ShokaX" />
    <category term="ShokaX安裝" />
    <category term="Hexo主題" />
    <category term="ShokaX插件" />
    <category term="UiPath" />
    <category term="VMware" />
    <category term="VMware下載" />
    <category term="虛擬機" />
    <category term="domain" />
    <category term="TLD-LIST" />
    <category term="eu.org" />
    <category term="cloudflare" />
    <category term="madVR" />
    <category term="sunshine" />
    <category term="Parsec VDD" />
    <category term="Moonlight" />
    <entry>
        <id>https://blog.minz.li/Courses/data-structures/</id>
        <title>資料結構</title>
        <link rel="alternate" href="https://blog.minz.li/Courses/data-structures/"/>
        <content type="html">&lt;h1 id=&#34;circular-queue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#circular-queue&#34;&gt;#&lt;/a&gt; Circular Queue&lt;/h1&gt;
&lt;pre class=&#34;shiki shiki-themes vitesse-light vitesse-dark&#34; style=&#34;background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee&#34; tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;graph LR&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;    A&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt; --&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;&gt;&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt; B&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;    B --&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;&gt;&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt; C&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;    C --&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;&gt;&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt; D&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;D&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;    D --&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;&gt;&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt; A&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一般的隊列（Queue）:FIFO&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Queue&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Circular Queue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;資料排列方式&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;線性順序排列&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;循環順序排列，即將尾端和前端連接起來&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;插入和刪除操作&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;刪除操作都在前端進行&amp;lt;br&amp;gt;插入操作都在尾端進行&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;插入和刪除操作不固定&amp;lt;br&amp;gt;可以在任何位置進行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;記憶體空間&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;更多&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;較少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;效率&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;低&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;dfs-and-bfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dfs-and-bfs&#34;&gt;#&lt;/a&gt; DFS and BFS&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;深度優先搜尋 (Depth-First Search, DFS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;深度優先搜尋 (DFS) 是一種用於搜尋圖或樹結構中所有頂點的遞迴演算法。&lt;br /&gt;
它會沿著一條路徑一直深入到不能再走為止，然後回溯並探索其他路徑。&lt;/p&gt;
&lt;p&gt;例如，假設我們有一個圖 G，其節點為 {0, 1, 2, 3}，邊為 {(0, 1), (0, 2), (1, 2), (2, 3)}。&lt;/p&gt;
&lt;p&gt;如果從節點 2 開始步驟如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;訪問節點 2&lt;br /&gt;
我們首先訪問節點 2，並將其標記為已訪問。&lt;/li&gt;
&lt;li&gt;選擇並訪問一個相鄰的未訪問節點&lt;br /&gt;
從節點 2 的相鄰節點中選擇一個未訪問的節點（假設選擇節點 3），並訪問它。標記節點 3 為已訪問。&lt;/li&gt;
&lt;li&gt;繼續深入訪問節點 3 的相鄰未訪問節點&lt;br /&gt;
檢查節點 3 的相鄰節點，發現節點 3 沒有未訪問的相鄰節點，則回溯到節點 2。&lt;/li&gt;
&lt;li&gt;回溯並選擇另一個相鄰的未訪問節點&lt;br /&gt;
回到節點 2，選擇另一個相鄰的未訪問節點（節點 0），並訪問它。標記節點 0 為已訪問。&lt;/li&gt;
&lt;li&gt;深入訪問節點 0 的相鄰未訪問節點&lt;br /&gt;
檢查節點 0 的相鄰節點，發現節點 1 是未訪問的，於是訪問節點 1，並標記它為已訪問。&lt;/li&gt;
&lt;li&gt;繼續深入或回溯&lt;br /&gt;
檢查節點 1 的相鄰節點，發現節點 1 連接到的節點 2 已經被訪問，無其他未訪問節點，則回溯到節點 0，再回溯到節點 2。&lt;/li&gt;
&lt;li&gt;結束搜尋&lt;br /&gt;
當回溯到節點 2 且所有相鄰節點都已訪問時，深度優先搜尋結束。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;廣度優先搜尋 (Breadth-First Search, BFS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 BFS 中，從起點節點開始，逐層地擴展搜索，先探索所有與起點節點相鄰的節點，然後再逐層探索與這些節點相鄰的節點，以此類推。&lt;/p&gt;
&lt;p&gt;BFS 使用一個稱為**佇列（Queue）**的資料結構來維護待處理的節點。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將起點節點放入佇列中。&lt;/li&gt;
&lt;li&gt;從佇列中取出一個節點，將其標記為已訪問，並擴展搜索到該節點相鄰的未訪問節點，將這些節點加入佇列中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;重複&lt;/strong&gt;這個過程，直到佇列中沒有未訪問的節點為止。&lt;/p&gt;
&lt;p&gt;BFS 的特點是以&lt;strong&gt;廣度&lt;/strong&gt;作為搜索的優先順序。也就是說，BFS 先搜索距離起點節點最近的節點，然後再搜索稍遠一些的節點。這意味著，當使用 BFS 搜索時，可以找到從起點到目標節點的最短路徑（如果存在）。&lt;/p&gt;
&lt;p&gt;BFS 可以用在圖形算法、迷宮解決、最短路徑問題等。它確保在搜索過程中先處理較近的節點，因此通常用於找尋最短路徑或尋找圖形中的最短距離。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DFS&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;BFS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;使用的資料結構&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Stack&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Queue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;順序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不唯一(若vertex從小到大拜訪則唯一)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不唯一&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;雜湊函數-hash-function&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#雜湊函數-hash-function&#34;&gt;#&lt;/a&gt; 雜湊函數 (Hash Function)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;雜湊函數 (Hash Function)&lt;/strong&gt; 是一種數學函數，它將任意大小的輸入數據（稱為&lt;strong&gt;資料&lt;/strong&gt;）轉換為固定大小的輸出字串（稱為&lt;strong&gt;雜湊值&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;例如我們將 &lt;code&gt;Hello World!&lt;/code&gt; 的字串分別用MD5、SHA1、SHA256&lt;br /&gt;
MD5: &lt;code&gt;ed076287532e86365e841e92bfc50d8c&lt;/code&gt;&lt;br /&gt;
SHA1: &lt;code&gt;2ef7bde608ce5404e97d5f042f95f89f1c232871&lt;/code&gt;&lt;br /&gt;
SHA256: &lt;code&gt;7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雜湊函數會希望是不可逆&lt;/li&gt;
&lt;li&gt;雜湊函數可能會有相同的情況（碰撞）&lt;/li&gt;
&lt;li&gt;原始資料有小變動，則希望雜湊值更大的變化（Avalanche Effect）&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="資料結構" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
</feed>
