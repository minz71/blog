{
    "version": "https://jsonfeed.org/version/1",
    "title": "minz的筆記本 • All posts by \"程式碼\" tag",
    "description": "~~~~~~~",
    "home_page_url": "https://blog.minz.li",
    "items": [
        {
            "id": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9/",
            "url": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9/",
            "title": "二元搜尋樹",
            "date_published": "2023-11-01T16:00:00.000Z",
            "content_html": "<h1 id=\"binary-search-tree\"><a class=\"anchor\" href=\"#binary-search-tree\">#</a> Binary Search Tree</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\n// 定義二元搜尋樹的節點結構\nstruct Node &#123;\n    int data;\n    Node* left;\n    Node* right;\n\n    // 節點的建構函式\n    Node(int value) &#123;\n        data = value;\n        left = nullptr;\n        right = nullptr;\n    &#125;\n&#125;;\n\n// 搜尋操作\nbool search(Node* root, int value) &#123;\n    // 若樹為空或找到了目標值，則返回 true\n    if (root == nullptr || root-&gt;data == value) &#123;\n        return true;\n    &#125;\n\n    // 若目標值比根節點的值小，則在左子樹中搜尋\n    if (value &lt; root-&gt;data) &#123;\n        return search(root-&gt;left, value);\n    &#125;\n\n    // 若目標值比根節點的值大，則在右子樹中搜尋\n    return search(root-&gt;right, value);\n&#125;\n\n// 插入操作\nNode* insert(Node* root, int value) &#123;\n    // 若樹為空，則創建一個新節點並返回\n    if (root == nullptr) &#123;\n        return new Node(value);\n    &#125;\n\n    // 若目標值比根節點的值小，則插入左子樹中\n    if (value &lt; root-&gt;data) &#123;\n        root-&gt;left = insert(root-&gt;left, value);\n    &#125;\n\n    // 若目標值比根節點的值大，則插入右子樹中\n    if (value &gt; root-&gt;data) &#123;\n        root-&gt;right = insert(root-&gt;right, value);\n    &#125;\n\n    // 返回根節點\n    return root;\n&#125;\n\n// 刪除操作\nNode* remove(Node* root, int value) &#123;\n    // 若樹為空，則返回空指針\n    if (root == nullptr) &#123;\n        return root;\n    &#125;\n\n    // 若目標值比根節點的值小，則在左子樹中刪除\n    if (value &lt; root-&gt;data) &#123;\n        root-&gt;left = remove(root-&gt;left, value);\n    &#125;\n    // 若目標值比根節點的值大，則在右子樹中刪除\n    else if (value &gt; root-&gt;data) &#123;\n        root-&gt;right = remove(root-&gt;right, value);\n    &#125;\n    // 若找到了目標值\n    else &#123;\n        // 情況1：沒有子節點或只有一個子節點\n        if (root-&gt;left == nullptr) &#123;\n            Node* temp = root-&gt;right;\n            delete root;\n            return temp;\n        &#125;\n        else if (root-&gt;right == nullptr) &#123;\n            Node* temp = root-&gt;left;\n            delete root;\n            return temp;\n        &#125;\n\n        // 情況2：有兩個子節點\n        // 找到右子樹中的最小值節點\n        Node* minNode = root-&gt;right;\n        while (minNode-&gt;left != nullptr) &#123;\n            minNode = minNode-&gt;left;\n        &#125;\n        // 複製最小值到目標節點\n        root-&gt;data = minNode-&gt;data;\n        // 在右子樹中刪除最小值節點\n        root-&gt;right = remove(root-&gt;right, minNode-&gt;data);\n    &#125;\n\n    // 返回修改後的根節點\n    return root;\n&#125;\n\n// 測試程式碼\nint main() &#123;\n    // 建立一個二元搜尋樹\n    Node* root = nullptr;\n    root = insert(root, 50);\n    root = insert(root, 30);\n    root = insert(root, 20);\n    root = insert(root, 40);\n    root = insert(root, 70);\n    root = insert(root, 60);\n    root= insert(root, 80);\n\n    // 搜尋值 40\n    if (search(root, 40)) &#123;\n        cout &lt;&lt; &quot;搜尋到值 40&quot; &lt;&lt; endl;\n    &#125; else &#123;\n        cout &lt;&lt; &quot;未找到值 40&quot; &lt;&lt; endl;\n    &#125;\n\n    // 刪除值 30\n    root = remove(root, 30);\n\n    // 搜尋值 30\n    if (search(root, 30)) &#123;\n        cout &lt;&lt; &quot;搜尋到值 30&quot; &lt;&lt; endl;\n    &#125; else &#123;\n        cout &lt;&lt; &quot;未找到值 30&quot; &lt;&lt; endl;\n    &#125;\n\n    return 0;\n&#125;\n\n</code></pre>\n<p>我們使用  <code>struct</code>  定義了二元搜尋樹的節點結構，每個節點包含一個整數數據、左子樹指針和右子樹指針。</p>\n<p><code>search</code>  函式實現了搜尋操作。它遞迴地在二元搜尋樹中搜尋目標值，若樹為空或找到了目標值則返回  <code>true</code> ，否則根據目標值與根節點數據的比較結果遞迴地在左子樹或右子樹中搜尋。</p>\n<p><code>insert</code>  函式實現了插入操作。它遞迴地在二元搜尋樹中找到合適的位置插入新節點，若樹為空則創建一個新節點，否則根據目標值與根節點數據的比較結果遞迴地在左子樹或右子樹中插入。</p>\n<p><code>remove</code>  函式實現了刪除操作。它遞迴地在二元搜尋樹中找到目標值所在的節點，並根據不同情況進行刪除。若目標節點沒有子節點或只有一個子節點，則直接刪除該節點並返回相應的子節點。若目標節點有兩個子節點，則找到右子樹中的最小值節點，將最小值複製到目標節點，然後在右子樹中刪除最小值節點。</p>\n<p>在  <code>main</code>  函式中，我們插入了一些節點，然後使用  <code>search</code>  函式搜尋值 40，並根據結果輸出相應的訊息。<br />\n接著，我們刪除值 30 的節點，再次使用  <code>search</code>  函式搜尋值 30，並根據結果輸出相應的訊息。</p>\n",
            "tags": [
                "程式碼"
            ]
        },
        {
            "id": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%8E%92%E5%BA%8F%E6%BC%94%E7%AE%97%E6%B3%95/",
            "url": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%8E%92%E5%BA%8F%E6%BC%94%E7%AE%97%E6%B3%95/",
            "title": "排序演算法",
            "date_published": "2023-11-01T16:00:00.000Z",
            "content_html": "<ul>\n<li>stable sorting : 相同的值排序後順序皆一樣</li>\n<li>unstable sorting : 相同的值排序後順序可能會不一樣</li>\n</ul>\n<h1 id=\"初階排序\"><a class=\"anchor\" href=\"#初階排序\">#</a> 初階排序</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\n// Bubble Sort mark:3-4\nvoid bubbleSort(vector&lt;int&gt;&amp; arr) &#123;\n    int n = arr.size();\n    for (int i = 0; i &lt; n - 1; i++) &#123;\n        for (int j = 0; j &lt; n - i - 1; j++) &#123;\n            if (arr[j] &gt; arr[j + 1]) &#123;\n                swap(arr[j], arr[j + 1]);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n// Selection Sort\n// 1. 先選這輪的最小\n// 2. 跟i交換\nvoid selectionSort(vector&lt;int&gt;&amp; arr) &#123;\n    int n = arr.size();\n    for (int i = 0; i &lt; n - 1; i++) &#123;\n        int minIndex = i;\n        for (int j = i + 1; j &lt; n; j++) &#123;\n            if (arr[j] &lt; arr[minIndex]) &#123;\n                minIndex = j; \n            &#125;\n        &#125;\n        swap(arr[i], arr[minIndex]);\n    &#125;\n&#125;\n\n// Insertion Sort\n// 1. 依序給這一輪的value\n// 2. value跟前面的比\n// 3. 放到完成的位置\nvoid insertionSort(vector&lt;int&gt;&amp; arr) &#123;\n    int n = arr.size();\n    for (int i = 1; i &lt; n; i++) &#123;\n        int key = arr[i];\n        int j = i - 1;\n        while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) &#123;\n            arr[j + 1] = arr[j];\n            j--;\n        &#125;\n        arr[j + 1] = key;\n    &#125;\n&#125;\n\nint main() &#123;\n    vector&lt;int&gt; arr = &#123;5, 2, 8, 3, 1&#125;;\n\n    // Bubble Sort\n    bubbleSort(arr);\n    cout &lt;&lt; &quot;Bubble Sort: &quot;;\n    for (int num : arr) &#123;\n        cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    // Selection Sort\n    arr = &#123;5, 2, 8, 3, 1&#125;;\n    selectionSort(arr);\n    cout &lt;&lt; &quot;Selection Sort: &quot;;\n    for (int num : arr) &#123;\n        cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    // Insertion Sort\n    arr = &#123;5, 2, 8, 3, 1&#125;;\n    insertionSort(arr);\n    cout &lt;&lt; &quot;Insertion Sort: &quot;;\n    for (int num : arr) &#123;\n        cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    return 0;\n&#125;\n\n</code></pre>\n<h1 id=\"quick-sort\"><a class=\"anchor\" href=\"#quick-sort\">#</a> Quick sort</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// 快速排序 (Quick Sort)\n// 最壞情況時間複雜度：O(n^2)\n// 平均情況時間複雜度：O(nlogn)\n// 最佳情況時間複雜度：O(nlogn)\nint partition(vector&lt;int&gt;&amp; arr, int low, int high) &#123;\n    int pivot = arr[high]; // 選擇最後一個元素作為主元\n    int i = low - 1;\n\n    for (int j = low; j &lt; high; j++) &#123;\n        if (arr[j] &lt; pivot) &#123;\n            i++;\n            swap(arr[i], arr[j]);\n        &#125;\n    &#125;\n\n    swap(arr[i + 1], arr[high]);\n    return i + 1;\n&#125;\n\nvoid quickSort(vector&lt;int&gt;&amp; arr, int low, int high) &#123;\n    if (low &lt; high) &#123;\n        int pivotIndex = partition(arr, low, high);\n\n        // 遞迴地對分割後的子陣列進行排序\n        quickSort(arr, low, pivotIndex - 1);\n        quickSort(arr, pivotIndex + 1, high);\n    &#125;\n&#125;\nint main() &#123;\n    vector&lt;int&gt; arr = &#123;5, 2, 8, 3, 1&#125;;\n\n    // 快速排序\n    cout &lt;&lt; &quot;快速排序結果：&quot; &lt;&lt; endl;\n    quickSort(arr, 0, arr.size() - 1);\n    for (int num : arr) &#123;\n        cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    return 0;\n&#125;\n\n</code></pre>\n<p>在快速排序中，我們使用  <code>partition</code>  函式將陣列分割為比主元小和比主元大的兩個子陣列。<br />\n然後，我們遞迴地對這兩個子陣列進行排序，直到排序完成。</p>\n",
            "tags": [
                "程式碼"
            ]
        },
        {
            "id": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E7%9F%A9%E9%99%A3%E9%A1%8C%E7%9B%AE/",
            "url": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E7%9F%A9%E9%99%A3%E9%A1%8C%E7%9B%AE/",
            "title": "矩陣程式題目",
            "date_published": "2023-11-01T16:00:00.000Z",
            "content_html": "<h1 id=\"找出矩陣中第二大的數字\"><a class=\"anchor\" href=\"#找出矩陣中第二大的數字\">#</a> 找出矩陣中第二大的數字</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;climits&gt; // 包含 INT_MIN 的定義\n\nusing namespace std;\n\nint findSecondLargest(const vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;\n    int largest = INT_MIN; // 最大數字\n    int secondLargest = INT_MIN; // 第二大數字\n\n    // 遍歷矩陣，找出最大數字和第二大數字\n    for (const auto&amp; row : matrix) &#123;\n        for (int num : row) &#123;\n            if (num &gt; largest) &#123;\n                secondLargest = largest;\n                largest = num;\n            &#125; else if (num &gt; secondLargest &amp;&amp; num &lt; largest) &#123;\n                secondLargest = num;\n            &#125;\n        &#125;\n    &#125;\n\n    return secondLargest;\n&#125;\n\nint main() &#123;\n    // 定義矩陣\n    vector&lt;vector&lt;int&gt;&gt; matrix = &#123;\n        &#123;4, 5, 6&#125;,\n        &#123;7, 10, 9&#125;,\n        &#123;2, 8, 3&#125;\n    &#125;;\n\n    // 呼叫函式找出第二大的數字\n    int secondLargest = findSecondLargest(matrix);\n\n    // 輸出結果\n    if (secondLargest != INT_MIN) &#123;\n        cout &lt;&lt; &quot;矩陣中第二大的數字為: &quot; &lt;&lt; secondLargest &lt;&lt; endl;\n    &#125; else &#123;\n        cout &lt;&lt; &quot;矩陣中沒有第二大的數字&quot; &lt;&lt; endl;\n    &#125;\n\n    return 0;\n&#125;\n\n</code></pre>\n<h1 id=\"轉置矩陣\"><a class=\"anchor\" href=\"#轉置矩陣\">#</a> 轉置矩陣</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\nconst int MAX_SIZE = 100;  // 定義矩陣的最大大小\n\n// 函數：計算矩陣的轉置\nvoid transposeMatrix(int matrix[][MAX_SIZE], int rows, int cols) &#123;\n    int transposedMatrix[MAX_SIZE][MAX_SIZE];  // 用於儲存轉置後的矩陣\n\n    // 遍歷矩陣元素，進行轉置\n    for (int i = 0; i &lt; rows; i++) &#123;\n        for (int j = 0; j &lt; cols; j++) &#123;\n            transposedMatrix[j][i] = matrix[i][j];\n        &#125;\n    &#125;\n\n    // 列印轉置後的矩陣\n    cout &lt;&lt; &quot;轉置矩陣：&quot; &lt;&lt; endl;\n    for (int i = 0; i &lt; cols; i++) &#123;\n        for (int j = 0; j &lt; rows; j++) &#123;\n            cout &lt;&lt; transposedMatrix[i][j] &lt;&lt; &quot; &quot;;\n        &#125;\n        cout &lt;&lt; endl;\n    &#125;\n&#125;\n\nint main() &#123;\n    int matrix[MAX_SIZE][MAX_SIZE];  // 定義原始矩陣\n    int rows, cols;  // 矩陣的行數和列數\n\n    // 輸入矩陣的行數和列數\n    cout &lt;&lt; &quot;請輸入矩陣的行數：&quot;;\n    cin &gt;&gt; rows;\n    cout &lt;&lt; &quot;請輸入矩陣的列數：&quot;;\n    cin &gt;&gt; cols;\n\n    // 輸入矩陣元素\n    cout &lt;&lt; &quot;請輸入矩陣的元素：&quot; &lt;&lt; endl;\n    for (int i = 0; i &lt; rows; i++) &#123;\n        for (int j = 0; j &lt; cols; j++) &#123;\n            cin &gt;&gt; matrix[i][j];\n        &#125;\n    &#125;\n\n    // 調用函數計算矩陣的轉置\n    transposeMatrix(matrix, rows, cols);\n\n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"兩個矩陣相乘\"><a class=\"anchor\" href=\"#兩個矩陣相乘\">#</a> 兩個矩陣相乘</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// 函式：矩陣相乘\nvector&lt;vector&lt;int&gt;&gt; matrixMultiply(const vector&lt;vector&lt;int&gt;&gt;&amp; matrix1, const vector&lt;vector&lt;int&gt;&gt;&amp; matrix2) &#123;\n    int rows1 = matrix1.size();    // 矩陣1的列數\n    int cols1 = matrix1[0].size(); // 矩陣1的行數（矩陣2的列數）\n    int cols2 = matrix2[0].size(); // 矩陣2的行數\n\n    // 建立結果矩陣，初始化為全0\n    vector&lt;vector&lt;int&gt;&gt; result(rows1, vector&lt;int&gt;(cols2, 0));\n\n    // 進行矩陣相乘運算\n    for (int i = 0; i &lt; rows1; i++) &#123;\n        for (int j = 0; j &lt; cols2; j++) &#123;\n            for (int k = 0; k &lt; cols1; k++) &#123;\n                result[i][j] += matrix1[i][k] * matrix2[k][j];\n            &#125;\n        &#125;\n    &#125;\n\n    return result;\n&#125;\n\nint main() &#123;\n    // 定義兩個矩陣\n    vector&lt;vector&lt;int&gt;&gt; matrix1 = &#123;&#123;1, 2&#125;, &#123;3, 4&#125;&#125;;\n    vector&lt;vector&lt;int&gt;&gt; matrix2 = &#123;&#123;5, 6&#125;, &#123;7, 8&#125;&#125;;\n\n    // 呼叫矩陣相乘函式\n    vector&lt;vector&lt;int&gt;&gt; result = matrixMultiply(matrix1, matrix2);\n\n    // 輸出結果矩陣\n    cout &lt;&lt; &quot;矩陣相乘的結果：&quot; &lt;&lt; endl;\n    for (const auto&amp; row : result) &#123;\n        for (const auto&amp; element : row) &#123;\n            cout &lt;&lt; element &lt;&lt; &quot; &quot;;\n        &#125;\n        cout &lt;&lt; endl;\n    &#125;\n\n    return 0;\n&#125;\n\n</code></pre>\n<h1 id=\"矩陣乘向量\"><a class=\"anchor\" href=\"#矩陣乘向量\">#</a> 矩陣乘向量</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// 計算矩陣與向量的乘積\nvector&lt;double&gt; matrixVectorMultiply(const vector&lt;vector&lt;double&gt;&gt;&amp; matrix, const vector&lt;double&gt;&amp; vector) &#123;\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n\n    // 檢查矩陣與向量的尺寸是否符合乘法規則\n    if (cols != vector.size()) &#123;\n        cout &lt;&lt; &quot;矩陣與向量的尺寸不符合乘法規則&quot; &lt;&lt; endl;\n        return vector&lt;double&gt;();\n    &#125;\n\n    // 創建結果向量，初始化為零\n    vector&lt;double&gt; result(rows, 0.0);\n\n    // 進行矩陣與向量的乘法\n    for (int i = 0; i &lt; rows; i++) &#123;\n        for (int j = 0; j &lt; cols; j++) &#123;\n            result[i] += matrix[i][j] * vector[j];\n        &#125;\n    &#125;\n\n    return result;\n&#125;\n\n// 測試程式碼\nint main() &#123;\n    // 定義矩陣\n    vector&lt;vector&lt;double&gt;&gt; matrix = &#123;&#123;1, 2, 3&#125;,\n                                     &#123;4, 5, 6&#125;,\n                                     &#123;7, 8, 9&#125;&#125;;\n\n    // 定義向量\n    vector&lt;double&gt; vector = &#123;1, 2, 3&#125;;\n\n    // 計算矩陣與向量的乘積\n    vector&lt;double&gt; result = matrixVectorMultiply(matrix, vector);\n\n    // 輸出結果\n    cout &lt;&lt; &quot;乘積結果：&quot;;\n    for (double value : result) &#123;\n        cout &lt;&lt; value &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    return 0;\n&#125;\n\n</code></pre>\n",
            "tags": [
                "程式碼"
            ]
        },
        {
            "id": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E9%A1%8C%E7%9B%AE/",
            "url": "https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E9%A1%8C%E7%9B%AE/",
            "title": "程式題目",
            "date_published": "2023-11-01T16:00:00.000Z",
            "content_html": "<h1 id=\"印星星\"><a class=\"anchor\" href=\"#印星星\">#</a> 印星星</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\nvoid printUpperTriangle(int n) &#123;\n    for (int i = 0; i &lt; n; i++) &#123;\n        for (int j = 0; j &lt;= i; j++) &#123;\n            cout &lt;&lt; &quot;* &quot;;\n        &#125;\n        cout &lt;&lt; endl;\n    &#125;\n&#125;\n\nvoid printLowerTriangle(int n) &#123;\n    for (int i = n; i &gt; 0; i--) &#123;\n        for (int j = 0; j &lt; i; j++) &#123;\n            cout &lt;&lt; &quot;* &quot;;\n        &#125;\n        cout &lt;&lt; endl;\n    &#125;\n&#125;\n\nint main() &#123;\n    int n;\n    cout &lt;&lt; &quot;請輸入行數: &quot;;\n    cin &gt;&gt; n;\n\n    cout &lt;&lt; &quot;上三角形：&quot; &lt;&lt; endl;\n    printUpperTriangle(n);\n\n    cout &lt;&lt; &quot;下三角形：&quot; &lt;&lt; endl;\n    printLowerTriangle(n);\n\n    return 0;\n&#125;\n\n</code></pre>\n<h1 id=\"用遞迴寫階乘\"><a class=\"anchor\" href=\"#用遞迴寫階乘\">#</a> 用遞迴寫階乘</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\n// 定義遞迴函式計算階乘\nint factorial(int n) &#123;\n    // Base case: 當 n 為 0 或 1 時，階乘為 1\n    if (n == 0 || n == 1) &#123;\n        return 1;\n    &#125;\n    // 遞迴呼叫：將問題分解為較小的子問題\n    // 階乘 n 可以表示為 n 乘上 (n-1) 的階乘\n    return n * factorial(n - 1);\n&#125;\n\nint main() &#123;\n    int num;\n    cout &lt;&lt; &quot;請輸入一個正整數: &quot;;\n    cin &gt;&gt; num;\n\n    // 呼叫遞迴函式計算階乘\n    int result = factorial(num);\n\n    cout &lt;&lt; num &lt;&lt; &quot; 的階乘是: &quot; &lt;&lt; result &lt;&lt; endl;\n\n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"找出陣列中第二大的數字\"><a class=\"anchor\" href=\"#找出陣列中第二大的數字\">#</a> 找出陣列中第二大的數字</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\nusing namespace std;\n\nint findSecondLargest(int arr[], int size) &#123;\n    int largest = INT_MIN;  // 初始化最大值為int類型的最小值\n    int secondLargest = INT_MIN;  // 初始化第二大值為int類型的最小值\n\n    // 遍歷數組，更新最大值和第二大值\n    for (int i = 0; i &lt; size; i++) &#123;\n        if (arr[i] &gt; largest) &#123;\n            secondLargest = largest;\n            largest = arr[i];\n        &#125; else if (arr[i] &gt; secondLargest &amp;&amp; arr[i] != largest) &#123;\n            secondLargest = arr[i];\n        &#125;\n    &#125;\n\n    return secondLargest;\n&#125;\n\nint main() &#123;\n    int arr[] = &#123;5, 2, 9, 1, 7, 4&#125;;  // 範例數組\n    int size = sizeof(arr) / sizeof(arr[0]);  // 計算數組大小\n\n    // 調用函數找到第二大的數\n    int secondLargest = findSecondLargest(arr, size);\n\n    cout &lt;&lt; &quot;第二大的數字是: &quot; &lt;&lt; secondLargest &lt;&lt; endl;\n\n    return 0;\n&#125;\n\n</code></pre>\n<h1 id=\"給定一數字找出因數\"><a class=\"anchor\" href=\"#給定一數字找出因數\">#</a> 給定一數字，找出因數</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\n// 找出給定數字的因數\nvector&lt;int&gt; findFactors(int num) &#123;\n    vector&lt;int&gt; factors;\n\n    // 從 1 開始遍歷到 num 的平方根\n    for (int i = 1; i * i &lt;= num; i++) &#123;\n        if (num % i == 0) &#123;\n            factors.push_back(i); // 將因數 i 加入 factors\n            if (i != num / i) &#123;\n                factors.push_back(num / i); // 將因數 num/i 加入 factors\n            &#125;\n        &#125;\n    &#125;\n\n    return factors;\n&#125;\n\nint main() &#123;\n    int num;\n    cout &lt;&lt; &quot;請輸入一個正整數：&quot;;\n    cin &gt;&gt; num;\n\n    vector&lt;int&gt; factors = findFactors(num);\n\n    cout &lt;&lt; num &lt;&lt; &quot; 的因數有：&quot;;\n    for (int factor : factors) &#123;\n        cout &lt;&lt; factor &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"判斷質數\"><a class=\"anchor\" href=\"#判斷質數\">#</a> 判斷質數</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nusing namespace std;\n\n// 判斷一個數字是否為質數\nbool isPrime(int number) &#123;\n    // 負數和小於等於 1 的數字不是質數\n    if (number &lt;= 1) &#123;\n        return false;\n    &#125;\n\n    // 使用平方根的方法進行質數判斷\n    // 如果一個數字 n 是合數（非質數）\n    // 那麼它必定可以分解為兩個因數 a 和 b\n    // 其中 a 和 b 都不大於 sqrt(n)\n    int sqrtNumber = sqrt(number);\n    for (int i = 2; i &lt;= sqrtNumber; i++) &#123;\n        if (number % i == 0) &#123;\n            return false;\n        &#125;\n    &#125;\n\n    // 如果沒有找到能整除 number 的數字，則 number 是質數\n    return true;\n&#125;\n\n// 測試程式碼\nint main() &#123;\n    int number;\n\n    cout &lt;&lt; &quot;請輸入一個數字：&quot;;\n    cin &gt;&gt; number;\n\n    // 呼叫 isPrime 函式判斷是否為質數\n    bool result = isPrime(number);\n\n    // 根據結果輸出訊息\n    if (result) &#123;\n        cout &lt;&lt; number &lt;&lt; &quot; 是質數&quot; &lt;&lt; endl;\n    &#125; else &#123;\n        cout &lt;&lt; number &lt;&lt; &quot; 不是質數&quot; &lt;&lt; endl;\n    &#125;\n\n    return 0;\n&#125;\n\n</code></pre>\n<h1 id=\"判斷子字串\"><a class=\"anchor\" href=\"#判斷子字串\">#</a> 判斷子字串</h1>\n<pre><code class=\"language-C++\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nusing namespace std;\n\n// 判斷一個字串是否為另一個字串的子字串\nbool isSubstring(const string&amp; str, const string&amp; substring) &#123;\n    // 如果子字串長度大於原始字串，則直接返回 false\n    if (substring.length() &gt; str.length()) &#123;\n        return false;\n    &#125;\n\n    // 遍歷原始字串，逐個比較字元\n    for (size_t i = 0; i &lt;= str.length() - substring.length(); i++) &#123;\n        bool isMatch = true;\n\n        // 檢查子字串是否匹配\n        for (size_t j = 0; j &lt; substring.length(); j++) &#123;\n            if (str[i + j] != substring[j]) &#123;\n                isMatch = false;\n                break;\n            &#125;\n        &#125;\n\n        // 如果子字串匹配，則返回 true\n        if (isMatch) &#123;\n            return true;\n        &#125;\n    &#125;\n\n    // 沒有找到匹配的子字串，返回 false\n    return false;\n&#125;\n\n// 測試程式碼\nint main() &#123;\n    string str, substring;\n\n    cout &lt;&lt; &quot;請輸入一個字串：&quot;;\n    getline(cin, str);\n\n    cout &lt;&lt; &quot;請輸入一個子字串：&quot;;\n    getline(cin, substring);\n\n    // 呼叫 isSubstring 函式判斷是否為子字串\n    bool result = isSubstring(str, substring);\n\n    // 根據結果輸出訊息\n    if (result) &#123;\n        cout &lt;&lt; &quot;\\\\&quot;&quot; &lt;&lt; substring &lt;&lt; &quot;\\\\&quot; 是 \\\\&quot;&quot; &lt;&lt; str &lt;&lt; &quot;\\\\&quot; 的子字串&quot; &lt;&lt; endl;\n    &#125; else &#123;\n        cout &lt;&lt; &quot;\\\\&quot;&quot; &lt;&lt; substring &lt;&lt; &quot;\\\\&quot; 不是 \\\\&quot;&quot; &lt;&lt; str &lt;&lt; &quot;\\\\&quot; 的子字串&quot; &lt;&lt; endl;\n    &#125;\n\n    return 0;\n&#125;\n\n</code></pre>\n<ul>\n<li>使用迴圈逐個比較字元的方式來實現。</li>\n</ul>\n<ol>\n<li>\n<p>檢查子字串的長度是否大於原始字串的長度，如果是，則直接返回 false，因為子字串不可能是原始字串的子字串。</p>\n</li>\n<li>\n<p>使用兩個嵌套的迴圈。外層迴圈遍歷原始字串，內層迴圈檢查從當前位置開始的子字串是否匹配。如果在內層迴圈中找到了不匹配的字元，則設置  <code>isMatch</code>  為 false，並且跳出內層迴圈。</p>\n</li>\n</ol>\n",
            "tags": [
                "程式碼"
            ]
        }
    ]
}