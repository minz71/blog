<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>minz的筆記本 • Posts by &#34;大學課程&#34; tag</title>
        <link>https://blog.minz.li</link>
        <description>這是一個分享我學習筆記的空間</description>
        <language>zh-TW</language>
        <pubDate>Wed, 01 Nov 2023 16:00:00 +0000</pubDate>
        <lastBuildDate>Wed, 01 Nov 2023 16:00:00 +0000</lastBuildDate>
        <category>Groq</category>
        <category>Cerebras</category>
        <category>SambaNova</category>
        <category>Deepseek</category>
        <category>llama</category>
        <category>llm</category>
        <category>benchmark</category>
        <category>LMSYS</category>
        <category>Chatbot Arena</category>
        <category>livebench</category>
        <category>aider</category>
        <category>Claude</category>
        <category>Anthropic</category>
        <category>Open-webui</category>
        <category>Custom</category>
        <category>API</category>
        <category>diskpart</category>
        <category>DevOps</category>
        <category>Docker</category>
        <category>WSL</category>
        <category>Netflix</category>
        <category>Netflix共享</category>
        <category>Github Action</category>
        <category>ShokaX</category>
        <category>ShokaX安裝</category>
        <category>Hexo主題</category>
        <category>ShokaX插件</category>
        <category>UiPath</category>
        <category>VMware</category>
        <category>VMware下載</category>
        <category>虛擬機</category>
        <category>domain</category>
        <category>TLD-LIST</category>
        <category>eu.org</category>
        <category>cloudflare</category>
        <category>madVR</category>
        <category>sunshine</category>
        <category>Parsec VDD</category>
        <category>Moonlight</category>
        <category>物件導向</category>
        <category>大學課程</category>
        <category>程式碼</category>
        <category>機率與統計</category>
        <category>演算法</category>
        <category>線性代數</category>
        <category>資料結構</category>
        <category>離散數學</category>
        <item>
            <guid isPermalink="true">https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1/</guid>
            <title>作業系統</title>
            <link>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1/</link>
            <category>大學課程</category>
            <pubDate>Wed, 01 Nov 2023 16:00:00 +0000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;race-condition-是什麼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#race-condition-是什麼&#34;&gt;#&lt;/a&gt; Race Condition 是什麼?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;競爭條件 (Race Condition)&lt;/strong&gt; 兩個或兩個以上的進程或線程在更改 &lt;strong&gt;共享資源(Share Resource)&lt;/strong&gt; 時會發生的情況。&lt;/p&gt;
&lt;p&gt;例如，假設我們有兩個Process A 和 B，都想要訪問同一個共享變量。&lt;br /&gt;
如果 A 和 B 都嘗試在同一時間讀取和修改這個變量，那麼就&lt;strong&gt;可能&lt;/strong&gt;會產生競爭條件。&lt;br /&gt;
如果沒有提供&lt;strong&gt;互斥存取&lt;/strong&gt;，我們&lt;strong&gt;無法確定&lt;/strong&gt; A 和 B 的執行順序，所以最終的結果可能會有所&lt;strong&gt;不同&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;解決方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鎖(Locks)&lt;/li&gt;
&lt;li&gt;原子變量(Atomic Variables)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;同步-synchronization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步-synchronization&#34;&gt;#&lt;/a&gt; 同步 (Synchronization)&lt;/h1&gt;
&lt;p&gt;主要目的是確保多個進程訪問共享資源時不會互相干擾，並防止由於並發訪問而可能產生的數據不一致&lt;/p&gt;
&lt;p&gt;為了實現這一點，我們可以使用各種同步技術，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信號量（semaphores）&lt;/li&gt;
&lt;li&gt;監視器（monitors）&lt;/li&gt;
&lt;li&gt;臨界區（critical sections）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，有兩個進程 A 和 B，它們都想要訪問同一個共享變數(share variable)。&lt;/p&gt;
&lt;h2 id=&#34;信號量semaphores&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信號量semaphores&#34;&gt;#&lt;/a&gt; 信號量（semaphores）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我們可以初始化一個信號量並將其設置為 1。&lt;/li&gt;
&lt;li&gt;當進程 A 想要訪問共享變量時，它會先減少信號量的值。&lt;/li&gt;
&lt;li&gt;如果信號量的值大於等於 0，那麼 A 可以繼續執行並訪問共享變量。&lt;/li&gt;
&lt;li&gt;否則，A 將被阻塞並等待。&lt;/li&gt;
&lt;li&gt;當 A 完成對共享變量的訪問後，它會增加信號量的值，這可能會喚醒等待的進程 B&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shiki shiki-themes vitesse-light vitesse-dark&#34; style=&#34;background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee&#34; tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;mutex semaphore &lt;/span&gt;&lt;span style=&#34;color:#999999;--shiki-dark:#666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2F798A;--shiki-dark:#4C9A91&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#999999;--shiki-dark:#666666&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#1E754F;--shiki-dark:#4D9375&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#1E754F;--shiki-dark:#4D9375&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#59873A;--shiki-dark:#80A665&#34;&gt;    wait&lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;mutex&lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#999999;--shiki-dark:#666666&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#A0ADA0;--shiki-dark:#758575DD&#34;&gt; // 檢查&gt;0通過並-1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;        臨界區程式碼...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#59873A;--shiki-dark:#80A665&#34;&gt;    signal&lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;mutex&lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#999999;--shiki-dark:#666666&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#A0ADA0;--shiki-dark:#758575DD&#34;&gt; // 離開時+1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;        臨界區以外程式碼...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;臨界區critical-sections&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#臨界區critical-sections&#34;&gt;#&lt;/a&gt; 臨界區（critical sections）&lt;/h2&gt;
&lt;pre class=&#34;shiki shiki-themes vitesse-light vitesse-dark&#34; style=&#34;background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee&#34; tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#A0ADA0;--shiki-dark:#758575DD&#34;&gt;// 臨界區指的是有使用共享變數之區塊&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#1E754F;--shiki-dark:#4D9375&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#1E754F;--shiki-dark:#4D9375&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#999999;--shiki-dark:#666666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;進入區段&lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;        臨界區程式碼...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#999999;--shiki-dark:#666666&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;離開區段&lt;/span&gt;&lt;span style=&#34;color:#1e754f;--shiki-dark:#4d9375&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#393A34;--shiki-dark:#DBD7CAEE&#34;&gt;        臨界區以外程式碼...&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;span style=&#34;color:#2993a3;--shiki-dark:#5eaab5&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;process-和-thread&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#process-和-thread&#34;&gt;#&lt;/a&gt; Process 和 Thread&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;程序 (Process)&lt;/strong&gt; 和 &lt;strong&gt;線程 (Thread)&lt;/strong&gt; 是兩種不同的執行實體，都是 CPU 調度和執行的基本單位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt; 有Process Control Block(PCB)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PID&lt;/li&gt;
&lt;li&gt;程式計數器 (Program counter)&lt;/li&gt;
&lt;li&gt;CPU暫存器內容&lt;/li&gt;
&lt;li&gt;Stack&lt;/li&gt;
&lt;li&gt;Code 區段&lt;/li&gt;
&lt;li&gt;Data 區段&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;&lt;strong&gt;Thread&lt;/strong&gt; 是一個半進程，它有自己的堆疊並執行一段給定的代碼。&amp;lt;br&amp;gt;與真正的進程不同，&lt;strong&gt;線程通常與其他線程共享其記憶體&lt;/strong&gt;。&lt;br /&gt;
包括 Code 區段、Data 區段、Heap 等。進程通常對每一個都有一個不同的記憶體區域，但進程中的多個線程共享同一個記憶體空間。一個進程可以有多個線程在運行。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;例如，假設我們有一個文字處理器程式。&lt;br /&gt;
該程式可能有&lt;strong&gt;一個主Process&lt;/strong&gt;負責管理用戶界面，&lt;br /&gt;
以及&lt;strong&gt;多個線程&lt;/strong&gt;負責處理後台任務，如保存文件、檢查拼寫和語法等。&lt;/p&gt;
&lt;h1 id=&#34;context-switch-是什麼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#context-switch-是什麼&#34;&gt;#&lt;/a&gt; Context Switch 是什麼?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Context Switch&lt;/strong&gt;（上下文切換）是一種系統事件，使得單個 CPU 能夠被多個進程共享的重要機制，它允許作業系統在多個進程之間進行切換，使得每個進程都有機會使用 CPU 來完成其執行。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;例如，假設我們有兩個進程 A 和 B。&lt;br /&gt;
A 正在 CPU 上運行，而 B 在等待 CPU。當作業系統決定讓 B 運行時，它會進行上下文切換。&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;保存 A 的當前狀態（包括程序計數器、暫存器的值等），&lt;/li&gt;
&lt;li&gt;然後加載 B 的狀態並讓 B 運行。&lt;/li&gt;
&lt;li&gt;當要讓 A 再次運行時，作業系統會再次進行上下文切換，恢復 A 的狀態並讓 A 運行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;deadlock-需要滿足的-4-個條件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deadlock-需要滿足的-4-個條件&#34;&gt;#&lt;/a&gt; DeadLock 需要滿足的 4 個條件&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Mutual exlusion（互斥存取） :&lt;br /&gt;
資源不能被多個進程同時使用。&lt;/li&gt;
&lt;li&gt;Hold &amp;amp; Wait（持有和等待）:&lt;br /&gt;
一個Process持有至少一個資源，同時在等待獲取額外的資源，而該資源又被其他Process持有。&lt;/li&gt;
&lt;li&gt;No preemption（不搶佔） :&lt;br /&gt;
已被持有的資源在進程使用完之前不能被強制奪取，除非該進程自願釋放資源。&lt;br /&gt;
如果系統可以強制奪取資源，就可以避免死結，但這可能會導致其他問題，如飢餓或優先權反轉。&lt;/li&gt;
&lt;li&gt;Circular wait（循環等待） :&lt;br /&gt;
存在一個進程集合{P1, P2, ..., PN}，其中 P1 正在等待 P2 持有的資源，P2 正在等待 P3 持有的資源，以此類推，最後 PN 正在等待 P1 持有的資源，形成一個循環等待的閉鎖環。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這些條件是導致死結的必要條件，但不是充分條件。&lt;br /&gt;
也就是說，如果系統中存在這些條件，死結就有&lt;strong&gt;可能&lt;/strong&gt;發生，但不一定會發生。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
