<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.minz.li</id>
    <title>minz的筆記本</title>
    <link href="https://blog.minz.li" />
    <updated>2023-12-12T16:00:00.000Z</updated>
    <category term="doc" />
    <category term="物件導向" />
    <category term="程式碼" />
    <category term="大學課程" />
    <category term="機率與統計" />
    <category term="演算法" />
    <category term="線性代數" />
    <category term="資料結構" />
    <category term="離散數學" />
    <entry>
        <id>https://blog.minz.li/ShokaX_modify/</id>
        <title>修改shokaX主題</title>
        <link rel="alternate" href="https://blog.minz.li/ShokaX_modify/"/>
        <content type="html">&lt;h2 id=&#34;移除複製的版權聲明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移除複製的版權聲明&#34;&gt;#&lt;/a&gt; 移除複製的版權聲明&lt;/h2&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;span&gt;\node_modules\hexo-theme-shokax\source\js\_app\page\post.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; htmlData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* author + &#39;&amp;lt;br&gt;&#39; + link + &#39;&amp;lt;br&gt;&#39; + license + &#39;&amp;lt;br&gt;&amp;lt;br&gt;&#39; + */&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSelection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\r\n&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-flags&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;br&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; textData &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* author + &#39;\n&#39; + link + &#39;\n&#39; + license + &#39;\n\n&#39; + */&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSelection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\r\n&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-flags&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;修正-內容過少-footer-無法顯示-bug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修正-內容過少-footer-無法顯示-bug&#34;&gt;#&lt;/a&gt; 修正 內容過少 Footer 無法顯示 BUG&lt;/h2&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;span&gt;node_modules\hexo-theme-shokax\source\css\_common\outline\outline.styl&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;inner &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; $content&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;desktop&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    align&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;items&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; flex&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;marked&#34;&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    min&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;height&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; 100vh&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 新增此行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; flex&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    justify&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;content&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; space&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;between&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hexo&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;sidebar.position&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;left&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;移除首頁毛玻璃&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移除首頁毛玻璃&#34;&gt;#&lt;/a&gt; 移除首頁毛玻璃&lt;/h2&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;span&gt;node_modules\hexo-theme-shokax\source\css\_common\outline\header\nav.styl&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; fixed&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  z&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;index&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; $zindex&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;125rem&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  backdrop&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;filter&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;saturate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;blur&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;20px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 移除此行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  the&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-12-12T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/doc/%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%BC%A2%E5%AD%97%E6%A8%99%E7%A4%BA/</id>
        <title>日本語漢字標示</title>
        <link rel="alternate" href="https://blog.minz.li/doc/%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%BC%A2%E5%AD%97%E6%A8%99%E7%A4%BA/"/>
        <content type="html">&lt;h1 id=&#34;furigana-文字注音&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#furigana-文字注音&#34;&gt;#&lt;/a&gt; furigana 文字注音&lt;/h1&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption data-lang=&#34;plain&#34;&gt;&lt;span&gt;furigana 文字注音&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#123;漢字^かんじ&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#123;取り返す^とりかえす&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#123;可愛い犬^か・わい・いいぬ&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#123;食べる^たべる&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;效果如下:&lt;/p&gt;
&lt;p&gt;&lt;ruby&gt;漢字&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;かんじ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;br /&gt;
&lt;ruby&gt; 取&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;と&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; り&lt;rt&gt;&lt;/rt&gt;返&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;かえ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; す&lt;rt&gt;&lt;/rt&gt;&lt;/ruby&gt;&lt;br /&gt;
&lt;ruby&gt;可&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;か&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; 愛&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;わい&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; い&lt;rt&gt;&lt;/rt&gt;犬&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;いぬ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;br /&gt;
&lt;ruby&gt; 食&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;た&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt; べる&lt;rt&gt;&lt;/rt&gt;&lt;/ruby&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.npmjs.com/package/furigana-markdown-it#quick-usage&#34;&gt; https://www.npmjs.com/package/furigana-markdown-it#quick-usage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/special/&#34;&gt;https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/special/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;html&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html&#34;&gt;#&lt;/a&gt; HTML&lt;/h1&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;span&gt;html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ruby&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;漢字&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;rt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;かんじ&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;rt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ruby&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ruby&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;取り返す&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;rt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;とりかえす&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;rt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ruby&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;效果如下:&lt;/p&gt;
&lt;p&gt;&lt;ruby&gt;漢字&lt;rt&gt;かんじ&lt;/rt&gt;&lt;/ruby&gt;&lt;br /&gt;
&lt;ruby&gt;取り返す&lt;rt&gt;とりかえす&lt;/rt&gt;&lt;/ruby&gt;&lt;/p&gt;
&lt;hr /&gt;
</content>
        <category term="doc" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/OOP/</id>
        <title>物件導向傳值?傳參考?</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/OOP/"/>
        <content type="html">&lt;h1 id=&#34;call-by-value-傳值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#call-by-value-傳值&#34;&gt;#&lt;/a&gt; call by value (傳值)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在 Call-by-Value 中，函式的參數是被傳遞值的&lt;strong&gt;副本&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在函式內部，對參數的修改不會影響到原始的變數。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;h3 id=&#34;call-by-address-傳位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#call-by-address-傳位置&#34;&gt;#&lt;/a&gt; call by address (傳位置)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;傳了實際的記憶體位置進去 function&lt;/li&gt;
&lt;li&gt;也是 &lt;code&gt;call by value&lt;/code&gt;  的變形，改為&lt;strong&gt;傳記憶體位址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;call-by-reference-傳參考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#call-by-reference-傳參考&#34;&gt;#&lt;/a&gt; call by reference (傳參考)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在 Call-by-Reference 中，函式的參數接受原始變數的參考（或記憶體位置）。&lt;/li&gt;
&lt;li&gt;在函式內部，對參數的修改會直接影響到原始的變數。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;

// Call-by-Value (值傳遞)
void incrementByValue(int value) &amp;#123;
    value++;
&amp;#125;

// Call-by-Reference using pointer (指標參考傳遞)
void incrementByPointer(int* ptr) &amp;#123;
    (*ptr)++;
&amp;#125;

// Call-by-Reference using reference (參考傳遞)
void incrementByReference(int&amp;amp; ref) &amp;#123;
    ref++;
&amp;#125;

int main() &amp;#123;
    int num = 10;

    incrementByValue(num);        // 傳遞值
    std::cout &amp;lt;&amp;lt; &amp;quot;Call-by-Value: &amp;quot; &amp;lt;&amp;lt; num &amp;lt;&amp;lt; std::endl;  // 輸出：10

    incrementByPointer(&amp;amp;num);     // 傳遞指標參考
    std::cout &amp;lt;&amp;lt; &amp;quot;Call-by-Pointer: &amp;quot; &amp;lt;&amp;lt; num &amp;lt;&amp;lt; std::endl; // 輸出：11

    incrementByReference(num);    // 傳遞參考
    std::cout &amp;lt;&amp;lt; &amp;quot;Call-by-Reference: &amp;quot; &amp;lt;&amp;lt; num &amp;lt;&amp;lt; std::endl; // 輸出：12

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;傳值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;傳地址&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;傳參考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;incrementByValue&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;incrementByPointer&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;incrementByReference&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;傳入函式的東西&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整數值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整數指標 (指標變數)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;整數引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;原始的 &lt;code&gt;num&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不影響 (因為是副本)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;會影響&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;會影響&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
        <category term="物件導向" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9/</id>
        <title>二元搜尋樹</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9/"/>
        <content type="html">&lt;h1 id=&#34;binary-search-tree&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#binary-search-tree&#34;&gt;#&lt;/a&gt; Binary Search Tree&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

// 定義二元搜尋樹的節點結構
struct Node &amp;#123;
    int data;
    Node* left;
    Node* right;

    // 節點的建構函式
    Node(int value) &amp;#123;
        data = value;
        left = nullptr;
        right = nullptr;
    &amp;#125;
&amp;#125;;

// 搜尋操作
bool search(Node* root, int value) &amp;#123;
    // 若樹為空或找到了目標值，則返回 true
    if (root == nullptr || root-&amp;gt;data == value) &amp;#123;
        return true;
    &amp;#125;

    // 若目標值比根節點的值小，則在左子樹中搜尋
    if (value &amp;lt; root-&amp;gt;data) &amp;#123;
        return search(root-&amp;gt;left, value);
    &amp;#125;

    // 若目標值比根節點的值大，則在右子樹中搜尋
    return search(root-&amp;gt;right, value);
&amp;#125;

// 插入操作
Node* insert(Node* root, int value) &amp;#123;
    // 若樹為空，則創建一個新節點並返回
    if (root == nullptr) &amp;#123;
        return new Node(value);
    &amp;#125;

    // 若目標值比根節點的值小，則插入左子樹中
    if (value &amp;lt; root-&amp;gt;data) &amp;#123;
        root-&amp;gt;left = insert(root-&amp;gt;left, value);
    &amp;#125;

    // 若目標值比根節點的值大，則插入右子樹中
    if (value &amp;gt; root-&amp;gt;data) &amp;#123;
        root-&amp;gt;right = insert(root-&amp;gt;right, value);
    &amp;#125;

    // 返回根節點
    return root;
&amp;#125;

// 刪除操作
Node* remove(Node* root, int value) &amp;#123;
    // 若樹為空，則返回空指針
    if (root == nullptr) &amp;#123;
        return root;
    &amp;#125;

    // 若目標值比根節點的值小，則在左子樹中刪除
    if (value &amp;lt; root-&amp;gt;data) &amp;#123;
        root-&amp;gt;left = remove(root-&amp;gt;left, value);
    &amp;#125;
    // 若目標值比根節點的值大，則在右子樹中刪除
    else if (value &amp;gt; root-&amp;gt;data) &amp;#123;
        root-&amp;gt;right = remove(root-&amp;gt;right, value);
    &amp;#125;
    // 若找到了目標值
    else &amp;#123;
        // 情況1：沒有子節點或只有一個子節點
        if (root-&amp;gt;left == nullptr) &amp;#123;
            Node* temp = root-&amp;gt;right;
            delete root;
            return temp;
        &amp;#125;
        else if (root-&amp;gt;right == nullptr) &amp;#123;
            Node* temp = root-&amp;gt;left;
            delete root;
            return temp;
        &amp;#125;

        // 情況2：有兩個子節點
        // 找到右子樹中的最小值節點
        Node* minNode = root-&amp;gt;right;
        while (minNode-&amp;gt;left != nullptr) &amp;#123;
            minNode = minNode-&amp;gt;left;
        &amp;#125;
        // 複製最小值到目標節點
        root-&amp;gt;data = minNode-&amp;gt;data;
        // 在右子樹中刪除最小值節點
        root-&amp;gt;right = remove(root-&amp;gt;right, minNode-&amp;gt;data);
    &amp;#125;

    // 返回修改後的根節點
    return root;
&amp;#125;

// 測試程式碼
int main() &amp;#123;
    // 建立一個二元搜尋樹
    Node* root = nullptr;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root= insert(root, 80);

    // 搜尋值 40
    if (search(root, 40)) &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;搜尋到值 40&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125; else &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;未找到值 40&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125;

    // 刪除值 30
    root = remove(root, 30);

    // 搜尋值 30
    if (search(root, 30)) &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;搜尋到值 30&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125; else &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;未找到值 30&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我們使用  &lt;code&gt;struct&lt;/code&gt;  定義了二元搜尋樹的節點結構，每個節點包含一個整數數據、左子樹指針和右子樹指針。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;search&lt;/code&gt;  函式實現了搜尋操作。它遞迴地在二元搜尋樹中搜尋目標值，若樹為空或找到了目標值則返回  &lt;code&gt;true&lt;/code&gt; ，否則根據目標值與根節點數據的比較結果遞迴地在左子樹或右子樹中搜尋。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert&lt;/code&gt;  函式實現了插入操作。它遞迴地在二元搜尋樹中找到合適的位置插入新節點，若樹為空則創建一個新節點，否則根據目標值與根節點數據的比較結果遞迴地在左子樹或右子樹中插入。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;remove&lt;/code&gt;  函式實現了刪除操作。它遞迴地在二元搜尋樹中找到目標值所在的節點，並根據不同情況進行刪除。若目標節點沒有子節點或只有一個子節點，則直接刪除該節點並返回相應的子節點。若目標節點有兩個子節點，則找到右子樹中的最小值節點，將最小值複製到目標節點，然後在右子樹中刪除最小值節點。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;main&lt;/code&gt;  函式中，我們插入了一些節點，然後使用  &lt;code&gt;search&lt;/code&gt;  函式搜尋值 40，並根據結果輸出相應的訊息。&lt;br /&gt;
接著，我們刪除值 30 的節點，再次使用  &lt;code&gt;search&lt;/code&gt;  函式搜尋值 30，並根據結果輸出相應的訊息。&lt;/p&gt;
</content>
        <category term="程式碼" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1/</id>
        <title>作業系統</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1/"/>
        <content type="html">&lt;h1 id=&#34;race-condition-是什麼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#race-condition-是什麼&#34;&gt;#&lt;/a&gt; Race Condition 是什麼？&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;競爭條件 (Race Condition)&lt;/strong&gt; 是當兩個或多個異步運行的程式碼（例如，中斷和背景迴圈）更改 &lt;strong&gt;共享資源 (Share Resource)&lt;/strong&gt; 時會發生的情況。&lt;/p&gt;
&lt;p&gt;例如，假設我們有兩個 Process A 和 B，都想要訪問同一個共享變量。如果 A 和 B 都嘗試在同一時間讀取和修改這個變量，那麼就&lt;strong&gt;可能&lt;/strong&gt;會產生競爭條件。&lt;br /&gt;
如果沒有提供&lt;strong&gt;互斥存取&lt;/strong&gt;，我們&lt;strong&gt;無法確定&lt;/strong&gt; A 和 B 的執行順序，所以最終的結果可能會有所&lt;strong&gt;不同&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;解決方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鎖 (Locks)&lt;/li&gt;
&lt;li&gt;原子變量 (Atomic Variables)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;同步-synchronization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步-synchronization&#34;&gt;#&lt;/a&gt; 同步 (Synchronization)&lt;/h1&gt;
&lt;p&gt;主要目的是確保多個進程訪問共享資源時不會互相干擾，並防止由於並發訪問而可能產生的數據不一致&lt;/p&gt;
&lt;p&gt;為了實現這一點，我們可以使用各種同步技術，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信號量（semaphores）&lt;/li&gt;
&lt;li&gt;監視器（monitors）&lt;/li&gt;
&lt;li&gt;臨界區（critical sections）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，有兩個進程 A 和 B，它們都想要訪問同一個共享變數 (share variable)。&lt;/p&gt;
&lt;h2 id=&#34;信號量semaphores&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信號量semaphores&#34;&gt;#&lt;/a&gt; 信號量（semaphores）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我們可以初始化一個信號量並將其設置為 1。&lt;/li&gt;
&lt;li&gt;當進程 A 想要訪問共享變量時，它會先減少信號量的值。&lt;/li&gt;
&lt;li&gt;如果信號量的值大於等於 0，那麼 A 可以繼續執行並訪問共享變量。&lt;/li&gt;
&lt;li&gt;否則，A 將被阻塞並等待。&lt;/li&gt;
&lt;li&gt;當 A 完成對共享變量的訪問後，它會增加信號量的值，這可能會喚醒等待的進程 B2&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;mutex semaphore = 1;
while(true)&amp;#123;
    wait(mutex); // 檢查&amp;gt;0通過並-1
        臨界區程式碼...
    signal(mutex); // 離開時+1
        臨界區以外程式碼...
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;臨界區critical-sections&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#臨界區critical-sections&#34;&gt;#&lt;/a&gt; 臨界區（critical sections）&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;// 臨界區指的是有使用共享變數之區塊
while(true)&amp;#123;
    (進入區段)
        臨界區程式碼...
    (離開區段)
        臨界區以外程式碼...
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;process和thread&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#process和thread&#34;&gt;#&lt;/a&gt; Process 和 Thread&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;程序 (Process)&lt;/strong&gt; 和 &lt;strong&gt;線程 (Thread)&lt;/strong&gt; 是兩種不同的執行實體，都是 CPU 調度和執行的基本單位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt; 有 Process Control Block (PCB)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PID&lt;/li&gt;
&lt;li&gt;程式計數器 (Program counter)&lt;/li&gt;
&lt;li&gt;CPU 暫存器內容&lt;/li&gt;
&lt;li&gt;Stack&lt;/li&gt;
&lt;li&gt;Code 區段&lt;/li&gt;
&lt;li&gt;Data 區段&lt;/li&gt;
&lt;li&gt;Heap&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;&lt;strong&gt;Thread&lt;/strong&gt; 是一個半進程，它有自己的堆疊並執行一段給定的代碼。&lt;br&gt;與真正的進程不同，&lt;strong&gt;線程通常與其他線程共享其記憶體&lt;/strong&gt;。&lt;br /&gt;
進程通常對每一個都有一個不同的記憶體區域。&lt;strong&gt;一個進程可以有多個線程在運行&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;例如，假設我們有一個文字處理器程式。&lt;br /&gt;
該程式可能有&lt;strong&gt;一個主 Process&lt;/strong&gt; 負責管理用戶界面，&lt;br /&gt;
以及&lt;strong&gt;多個線程&lt;/strong&gt;負責處理後台任務，如保存文件、檢查拼寫和語法等。&lt;/p&gt;
&lt;h1 id=&#34;content-switch-是什麼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#content-switch-是什麼&#34;&gt;#&lt;/a&gt; Content Switch 是什麼？&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Context Switch&lt;/strong&gt;（上下文切換）是一種系統事件，使得單個 CPU 能夠被多個進程共享的重要機制，它允許作業系統在多個進程之間進行切換，使得每個進程都有機會使用 CPU 來完成其執行。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;例如，假設我們有兩個進程 A 和 B。A 正在 CPU 上運行，而 B 在等待 CPU。當作業系統決定讓 B 運行時，它會進行上下文切換。&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;保存 A 的當前狀態（包括程序計數器、暫存器的值等），&lt;/li&gt;
&lt;li&gt;然後加載 B 的狀態並讓 B 運行。&lt;/li&gt;
&lt;li&gt;當要讓 A 再次運行時，作業系統會再次進行上下文切換，恢復 A 的狀態並讓 A 運行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;deadlock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deadlock&#34;&gt;#&lt;/a&gt; DeadLock&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Mutual exlusion 互斥存取&lt;/li&gt;
&lt;li&gt;Hold &amp;amp; Wait 拿了其他 Process 需要的資源並等待&lt;/li&gt;
&lt;li&gt;No preemption 不搶佔&lt;/li&gt;
&lt;li&gt;Circular wait 循環等待&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="大學課程" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%8E%92%E5%BA%8F%E6%BC%94%E7%AE%97%E6%B3%95/</id>
        <title>排序演算法</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%8E%92%E5%BA%8F%E6%BC%94%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;stable sorting : 相同的值排序後順序皆一樣&lt;/li&gt;
&lt;li&gt;unstable sorting : 相同的值排序後順序可能會不一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;初階排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初階排序&#34;&gt;#&lt;/a&gt; 初階排序&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;

// Bubble Sort mark:3-4
void bubbleSort(vector&amp;lt;int&amp;gt;&amp;amp; arr) &amp;#123;
    int n = arr.size();
    for (int i = 0; i &amp;lt; n - 1; i++) &amp;#123;
        for (int j = 0; j &amp;lt; n - i - 1; j++) &amp;#123;
            if (arr[j] &amp;gt; arr[j + 1]) &amp;#123;
                swap(arr[j], arr[j + 1]);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;

// Selection Sort
// 1. 先選這輪的最小
// 2. 跟i交換
void selectionSort(vector&amp;lt;int&amp;gt;&amp;amp; arr) &amp;#123;
    int n = arr.size();
    for (int i = 0; i &amp;lt; n - 1; i++) &amp;#123;
        int minIndex = i;
        for (int j = i + 1; j &amp;lt; n; j++) &amp;#123;
            if (arr[j] &amp;lt; arr[minIndex]) &amp;#123;
                minIndex = j; 
            &amp;#125;
        &amp;#125;
        swap(arr[i], arr[minIndex]);
    &amp;#125;
&amp;#125;

// Insertion Sort
// 1. 依序給這一輪的value
// 2. value跟前面的比
// 3. 放到完成的位置
void insertionSort(vector&amp;lt;int&amp;gt;&amp;amp; arr) &amp;#123;
    int n = arr.size();
    for (int i = 1; i &amp;lt; n; i++) &amp;#123;
        int key = arr[i];
        int j = i - 1;
        while (j &amp;gt;= 0 &amp;amp;&amp;amp; arr[j] &amp;gt; key) &amp;#123;
            arr[j + 1] = arr[j];
            j--;
        &amp;#125;
        arr[j + 1] = key;
    &amp;#125;
&amp;#125;

int main() &amp;#123;
    vector&amp;lt;int&amp;gt; arr = &amp;#123;5, 2, 8, 3, 1&amp;#125;;

    // Bubble Sort
    bubbleSort(arr);
    cout &amp;lt;&amp;lt; &amp;quot;Bubble Sort: &amp;quot;;
    for (int num : arr) &amp;#123;
        cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;

    // Selection Sort
    arr = &amp;#123;5, 2, 8, 3, 1&amp;#125;;
    selectionSort(arr);
    cout &amp;lt;&amp;lt; &amp;quot;Selection Sort: &amp;quot;;
    for (int num : arr) &amp;#123;
        cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;

    // Insertion Sort
    arr = &amp;#123;5, 2, 8, 3, 1&amp;#125;;
    insertionSort(arr);
    cout &amp;lt;&amp;lt; &amp;quot;Insertion Sort: &amp;quot;;
    for (int num : arr) &amp;#123;
        cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;quick-sort&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-sort&#34;&gt;#&lt;/a&gt; Quick sort&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

// 快速排序 (Quick Sort)
// 最壞情況時間複雜度：O(n^2)
// 平均情況時間複雜度：O(nlogn)
// 最佳情況時間複雜度：O(nlogn)
int partition(vector&amp;lt;int&amp;gt;&amp;amp; arr, int low, int high) &amp;#123;
    int pivot = arr[high]; // 選擇最後一個元素作為主元
    int i = low - 1;

    for (int j = low; j &amp;lt; high; j++) &amp;#123;
        if (arr[j] &amp;lt; pivot) &amp;#123;
            i++;
            swap(arr[i], arr[j]);
        &amp;#125;
    &amp;#125;

    swap(arr[i + 1], arr[high]);
    return i + 1;
&amp;#125;

void quickSort(vector&amp;lt;int&amp;gt;&amp;amp; arr, int low, int high) &amp;#123;
    if (low &amp;lt; high) &amp;#123;
        int pivotIndex = partition(arr, low, high);

        // 遞迴地對分割後的子陣列進行排序
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    &amp;#125;
&amp;#125;
int main() &amp;#123;
    vector&amp;lt;int&amp;gt; arr = &amp;#123;5, 2, 8, 3, 1&amp;#125;;

    // 快速排序
    cout &amp;lt;&amp;lt; &amp;quot;快速排序結果：&amp;quot; &amp;lt;&amp;lt; endl;
    quickSort(arr, 0, arr.size() - 1);
    for (int num : arr) &amp;#123;
        cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在快速排序中，我們使用  &lt;code&gt;partition&lt;/code&gt;  函式將陣列分割為比主元小和比主元大的兩個子陣列。&lt;br /&gt;
然後，我們遞迴地對這兩個子陣列進行排序，直到排序完成。&lt;/p&gt;
</content>
        <category term="程式碼" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%A9%9F%E7%8E%87%E8%88%87%E7%B5%B1%E8%A8%88/</id>
        <title>機率與統計</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%A9%9F%E7%8E%87%E8%88%87%E7%B5%B1%E8%A8%88/"/>
        <content type="html">&lt;h1 id=&#34;互斥和獨立事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#互斥和獨立事件&#34;&gt;#&lt;/a&gt; 互斥和獨立事件&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;互斥事件&lt;/strong&gt;指的是兩個或多個事件不可能同時發生的情況。&lt;br /&gt;
如果事件 A 發生，那麼事件 B 就不可能發生，且反之亦然。&lt;/p&gt;
&lt;p&gt;數學上，兩個互斥事件 A 和 B 的概率滿足 P (A ∩ B) = 0，&lt;strong&gt;即它們的交集為空集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，擲一個骰子，事件 A 是出現奇數點數，事件 B 是出現偶數點數。由於奇數和偶數是互斥的，因此在一次擲骰子的結果中，不能同時出現奇數和偶數。因此，事件 A 和事件 B 是互斥事件。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;獨立事件&lt;/strong&gt;指的是兩個或多個事件的發生與其他事件的發生無關。&lt;br /&gt;
如果事件 A 發生與否&lt;strong&gt;不會影響&lt;/strong&gt;事件 B 發生的概率，其概率滿足乘法規則。&lt;br /&gt;
兩個獨立事件 A 和 B 的概率滿足 P (A ∩ B) = P (A) * P (B)。&lt;/p&gt;
&lt;p&gt;例如，考慮一個從一副撲克牌中抽取兩張牌的實驗，事件 A 是第一張牌是紅心，事件 B 是第二張牌是黑桃。由於每次抽取牌都是獨立的，第一張牌是紅心不會影響第二張牌是黑桃的概率，反之亦然。因此，事件 A 和事件 B 是獨立事件。&lt;/p&gt;
&lt;h1 id=&#34;骰1個骰子的期望值怎麼算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#骰1個骰子的期望值怎麼算&#34;&gt;#&lt;/a&gt; 骰 1 個骰子的期望值怎麼算？&lt;/h1&gt;
&lt;p&gt;期望值是 相加所有 (出現的值 * 出現的機率)&lt;/p&gt;
&lt;p&gt;期望值 = (1 × 1/6) + (2 × 1/6) + (3 × 1/6) + (4 × 1/6) + (5 × 1/6) + (6 × 1/6) = 3.5&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;骰的次數越多總平均會接近期望值&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;期望值 3.5 表示在長期多次擲骰子的情況下，&lt;br /&gt;
擲骰子的平均結果將趨近於 3.5。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;h1 id=&#34;三顆骰子一奇數二偶數的機率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三顆骰子一奇數二偶數的機率&#34;&gt;#&lt;/a&gt; 三顆骰子，一奇數二偶數的機率&lt;/h1&gt;
&lt;p&gt;現在，我們需要確定符合要求的&lt;strong&gt;組合數&lt;/strong&gt;。我們希望有一顆骰子是奇數，而另外兩顆骰子是偶數。這種情況下，有三種可能性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;奇數 - 偶數 - 偶數&lt;/li&gt;
&lt;li&gt;偶數 - 奇數 - 偶數&lt;/li&gt;
&lt;li&gt;偶數 - 偶數 - 奇數&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;對於每種可能性，我們需要計算出每顆骰子的組合數。奇數有三種選擇（1、3、5），而偶數有三種選擇（2、4、6）。&lt;/p&gt;
&lt;p&gt;因此，根據組合計數的原理，我們可以計算滿足要求的組合數為：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;3 (奇數選擇) * 3 (偶數選擇) * 3 (偶數選擇) = 27&lt;/li&gt;
&lt;li&gt;3 (偶數選擇) * 3 (奇數選擇) * 3 (偶數選擇) = 27&lt;/li&gt;
&lt;li&gt;3 (偶數選擇) * 3 (偶數選擇) * 3 (奇數選擇) = 27&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下來，我們需要考慮所有可能的組合數。每顆骰子有六個可能的點數，所以總共有 6 * 6 * 6 = 216 種可能的組合。&lt;/p&gt;
&lt;p&gt;最後，我們可以計算機率，即符合要求的組合數除以所有可能的組合數：&lt;/p&gt;
&lt;p&gt;機率 = 符合要求的組合數 / 所有可能的組合數 = (27+27+27) / 216&lt;/p&gt;
&lt;h1 id=&#34;完整撲克牌任意抽五張數字都不一樣的機率為何&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整撲克牌任意抽五張數字都不一樣的機率為何&#34;&gt;#&lt;/a&gt; 完整撲克牌任意抽五張數字都不一樣的機率為何？&lt;/h1&gt;
&lt;p&gt;撲克牌的數量為 52 張，再加上 2 張鬼牌，總共有 54 張牌。數字為 1 到 10 還有 J Q K，有 4 種花色。我們來計算一次抽取五張數字都不一樣（不管花色）的機率。&lt;/p&gt;
&lt;p&gt;首先，我們需要確定有多少種不同的數字。在撲克牌中，有 13 種不同的數字（1-10，J，Q，K）。因此，第一張牌可以有 13 種選擇，第二張牌可以有 12 種選擇（因為不能與第一張牌的數字相同），依此類推，直到第五張牌只有 9 種選擇。&lt;/p&gt;
&lt;p&gt;因此，符合條件的組合數為 13 * 12 * 11 * 10 * 9。&lt;/p&gt;
&lt;p&gt;然後，我們需要考慮所有可能的組合數。每次抽牌都有 54 種可能（52 張撲克牌和 2 張鬼牌），所以五次抽牌總共有 C (54,5) 種可能的組合。&lt;/p&gt;
&lt;p&gt;最後，我們可以計算機率，即符合要求的組合數除以所有可能的組合數：&lt;/p&gt;
&lt;p&gt;機率 = 符合要求的組合數 / 所有可能的組合數 = (13 * 12 * 11 * 10 * 9) / C (54,5)&lt;/p&gt;
&lt;h1 id=&#34;有五個銅板有四個正面的機率是多少&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有五個銅板有四個正面的機率是多少&#34;&gt;#&lt;/a&gt; 有五個銅板，有四個正面的機率是多少？&lt;/h1&gt;
&lt;p&gt;我們有五個銅板，每個銅板都有兩種可能的結果：正面和反面。&lt;br /&gt;
因此，總共有 2^5 = 32 種不同的組合。&lt;/p&gt;
&lt;p&gt;現在我們要計算有四個正面的組合數。在五個銅板中，選擇四個銅板出現正面，剩下的一個銅板出現反面。這種情況有 C (5, 4) = 5 種組合。&lt;/p&gt;
&lt;p&gt;每個符合條件的組合中，有四個銅板出現正面，一個銅板出現反面。因此，我們可以將每個銅板出現正面的機率相乘，並將其乘以符合條件的組合數。&lt;/p&gt;
&lt;p&gt;所以，機率 = C (5, 4) * p^4 * (1-p)^1 = 5 * (1/2)^4 * (1/2)^1 = 5/32&lt;/p&gt;
&lt;h1 id=&#34;pdf跟cdf是什麼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pdf跟cdf是什麼&#34;&gt;#&lt;/a&gt; PDF 跟 CDF 是什麼&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;概率密度函數（Probability Density Function, PDF）&lt;br /&gt;
&lt;img data-src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Boxplot_vs_PDF.svg/1024px-Boxplot_vs_PDF.svg.png&#34;  height=&#34;300&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;概率密度函數（PDF）用於描述連續隨機變量在不同&lt;strong&gt;取值點&lt;/strong&gt;上的概率密度。&lt;br /&gt;
它可以看作是概率分布曲線的密度，通常是一個平滑的曲線。&lt;br /&gt;
PDF 的值代表了在特定取值點上的概率密度，即該點附近的概率密度值有多大。&lt;br /&gt;
PDF 的積分對應於在整個定義域上的概率，其積分值等於 1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;累積分佈函數（Cumulative Distribution Function, CDF）&lt;br /&gt;
&lt;img data-src=&#34;https://upload.wikimedia.org/wikipedia/commons/7/77/Exponential_distribution_cdf.png&#34;  height=&#34;300&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;累積分佈函數（CDF）則用於描述&lt;strong&gt;隨機變量小於或等於給定值的概率&lt;/strong&gt;。&lt;br /&gt;
它表示了隨機變量取值小於或等於某一特定值的概率。&lt;br /&gt;
CDF 是一個非遞減的函數，其值域在 0 到 1 之間。&lt;br /&gt;
CDF 的值在 x 處給出了小於或等於 x 的概率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CDF 是 PDF 的積分，也就是將 PDF 曲線下的面積進行累加。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;什麼是gaussian-function&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什麼是gaussian-function&#34;&gt;#&lt;/a&gt; 什麼是 Gaussian function&lt;/h1&gt;
&lt;p&gt;高斯函數（Gaussian function）是一種數學函數，也稱為&lt;strong&gt;常態分佈函數&lt;/strong&gt;（normal distribution function）或高斯分佈函數（Gaussian distribution function）。&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;f(x) = A * exp(-(x - μ)² / (2σ²))&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;σ = 標準差&lt;br /&gt;
 σ² = 變異數&lt;br /&gt;
在這個公式中，f (x) 是函數在 x 點的值，A 是幅度（或最大值），μ 是平均值，σ 是標準差，exp 是自然指數函數。&lt;/p&gt;
&lt;p&gt;高斯函數通常呈現一個對稱的鐘形曲線，其峰值位於平均值 μ 的位置。標準差 σ 確定了曲線的寬度，越大曲線越寬，越小曲線越窄。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;對稱性：曲線以平均值為中心對稱。&lt;/li&gt;
&lt;li&gt;唯一峰值：曲線有一個單一的最大值。&lt;/li&gt;
&lt;li&gt;平穩性：曲線在平均值兩側遞減，沒有突變或跳躍。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="機率與統計" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%BC%94%E7%AE%97%E6%B3%95/</id>
        <title>演算法</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E6%BC%94%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;h1 id=&#34;dp跟divide-and-conquer差在哪&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dp跟divide-and-conquer差在哪&#34;&gt;#&lt;/a&gt; DP 跟 divide and conquer 差在哪&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;分而治之法 (Divide and Conquer)&lt;/strong&gt;  如果問題很大，我們就把問題&lt;strong&gt;分解成較小的子問題&lt;/strong&gt;，然後分別解決這些子問題。一旦所有的子問題都解決了，我們就把所有子問題的解決方案組合起來，找到大問題的解決方案。分治法的限制是子問題應該與主要問題相同。例如，如果主要問題是排序，那麼子問題也應該是排序。分治法的策略本質上是遞迴的。&lt;/p&gt;
&lt;p&gt;動態規劃 (&lt;strong&gt;Dynamic Programming&lt;/strong&gt;) 則是將優化問題分解成更簡單的子問題，並&lt;strong&gt;存儲&lt;/strong&gt;每個子問題的解決方案，以便每個子問題只需要解決一次。一旦所有的子問題都解決了，我們就將每個子問題的結果連接起來，找到初始問題的解決方案。&lt;/p&gt;
&lt;p&gt;當我們看到一個遞迴解決方案對於相同的輸入有重複的調用時，我們可以使用動態規劃來優化它。&lt;/p&gt;
&lt;p&gt;這種方法的想法是簡單地&lt;strong&gt;存儲子問題&lt;/strong&gt;的結果，這樣我們就不需要在以後需要時重新計算它們。&lt;/p&gt;
&lt;p&gt;例如，如果我們寫出斐波那契數列的簡單遞迴解決方案，我們會得到指數時間複雜度，如果我們通過存儲子問題的解決方案來優化它，時間複雜度就會從指數級&lt;strong&gt;降低到多項式級&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;quick-sort&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-sort&#34;&gt;#&lt;/a&gt; Quick sort&lt;/h1&gt;
&lt;p&gt;快速排序（Quick Sort）是一種常用的排序算法，它通過選擇一個基準元素，將數列分割成兩個子數列，並將比基準元素小的元素放在基準元素的左邊，比基準元素大的元素放在基準元素的右邊，然後對子數列進行遞迴排序，最終實現整個數列的排序。&lt;/p&gt;
&lt;p&gt;下面是一個簡單的範例來說明快速排序的過程：&lt;/p&gt;
&lt;p&gt;假設我們要對數列 [7, 2, 1, 6, 8, 5, 3] 進行排序。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;選擇基準元素：從數列中選擇一個基準元素，通常選擇第一個或最後一個元素。在這個例子中，我們選擇第一個元素 7 作為基準元素。&lt;/li&gt;
&lt;li&gt;分割操作：將數列分割成兩個子數列，小於基準元素的元素放在左邊，大於基準元素的元素放在右邊。在這個例子中，我們將小於 7 的元素放在左邊，大於 7 的元素放在右邊，得到 [2, 1, 6, 5, 3, 7, 8]。&lt;/li&gt;
&lt;li&gt;遞迴排序：對左右兩個子數列進行遞迴排序，重複上述步驟。在這個例子中，我們對左子數列 [2, 1, 6, 5, 3] 和右子數列 [8] 進行遞迴排序。&lt;/li&gt;
&lt;li&gt;合併結果：將排序後的左子數列、基準元素和排序後的右子數列合併在一起。在這個例子中，最終得到排序後的數列 [1, 2, 3, 5, 6, 7, 8]。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;總結：&lt;br /&gt;
快速排序通過選擇基準元素，將數列分割成兩個子數列，並對子數列進行遞迴排序，最終實現整個數列的排序。它的核心操作是分割，將小於基準元素的元素放在左邊，大於基準元素的元素放在右邊。快速排序是一種高效的排序算法，平均時間複雜度為 O (nlogn)，但在最壞情況下可能達到 O (n^2)。&lt;/p&gt;
</content>
        <category term="演算法" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E7%9F%A9%E9%99%A3%E9%A1%8C%E7%9B%AE/</id>
        <title>矩陣程式題目</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E7%9F%A9%E9%99%A3%E9%A1%8C%E7%9B%AE/"/>
        <content type="html">&lt;h1 id=&#34;找出矩陣中第二大的數字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找出矩陣中第二大的數字&#34;&gt;#&lt;/a&gt; 找出矩陣中第二大的數字&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;climits&amp;gt; // 包含 INT_MIN 的定義

using namespace std;

int findSecondLargest(const vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) &amp;#123;
    int largest = INT_MIN; // 最大數字
    int secondLargest = INT_MIN; // 第二大數字

    // 遍歷矩陣，找出最大數字和第二大數字
    for (const auto&amp;amp; row : matrix) &amp;#123;
        for (int num : row) &amp;#123;
            if (num &amp;gt; largest) &amp;#123;
                secondLargest = largest;
                largest = num;
            &amp;#125; else if (num &amp;gt; secondLargest &amp;amp;&amp;amp; num &amp;lt; largest) &amp;#123;
                secondLargest = num;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    return secondLargest;
&amp;#125;

int main() &amp;#123;
    // 定義矩陣
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrix = &amp;#123;
        &amp;#123;4, 5, 6&amp;#125;,
        &amp;#123;7, 10, 9&amp;#125;,
        &amp;#123;2, 8, 3&amp;#125;
    &amp;#125;;

    // 呼叫函式找出第二大的數字
    int secondLargest = findSecondLargest(matrix);

    // 輸出結果
    if (secondLargest != INT_MIN) &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;矩陣中第二大的數字為: &amp;quot; &amp;lt;&amp;lt; secondLargest &amp;lt;&amp;lt; endl;
    &amp;#125; else &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;矩陣中沒有第二大的數字&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;轉置矩陣&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#轉置矩陣&#34;&gt;#&lt;/a&gt; 轉置矩陣&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

const int MAX_SIZE = 100;  // 定義矩陣的最大大小

// 函數：計算矩陣的轉置
void transposeMatrix(int matrix[][MAX_SIZE], int rows, int cols) &amp;#123;
    int transposedMatrix[MAX_SIZE][MAX_SIZE];  // 用於儲存轉置後的矩陣

    // 遍歷矩陣元素，進行轉置
    for (int i = 0; i &amp;lt; rows; i++) &amp;#123;
        for (int j = 0; j &amp;lt; cols; j++) &amp;#123;
            transposedMatrix[j][i] = matrix[i][j];
        &amp;#125;
    &amp;#125;

    // 列印轉置後的矩陣
    cout &amp;lt;&amp;lt; &amp;quot;轉置矩陣：&amp;quot; &amp;lt;&amp;lt; endl;
    for (int i = 0; i &amp;lt; cols; i++) &amp;#123;
        for (int j = 0; j &amp;lt; rows; j++) &amp;#123;
            cout &amp;lt;&amp;lt; transposedMatrix[i][j] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
        &amp;#125;
        cout &amp;lt;&amp;lt; endl;
    &amp;#125;
&amp;#125;

int main() &amp;#123;
    int matrix[MAX_SIZE][MAX_SIZE];  // 定義原始矩陣
    int rows, cols;  // 矩陣的行數和列數

    // 輸入矩陣的行數和列數
    cout &amp;lt;&amp;lt; &amp;quot;請輸入矩陣的行數：&amp;quot;;
    cin &amp;gt;&amp;gt; rows;
    cout &amp;lt;&amp;lt; &amp;quot;請輸入矩陣的列數：&amp;quot;;
    cin &amp;gt;&amp;gt; cols;

    // 輸入矩陣元素
    cout &amp;lt;&amp;lt; &amp;quot;請輸入矩陣的元素：&amp;quot; &amp;lt;&amp;lt; endl;
    for (int i = 0; i &amp;lt; rows; i++) &amp;#123;
        for (int j = 0; j &amp;lt; cols; j++) &amp;#123;
            cin &amp;gt;&amp;gt; matrix[i][j];
        &amp;#125;
    &amp;#125;

    // 調用函數計算矩陣的轉置
    transposeMatrix(matrix, rows, cols);

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;兩個矩陣相乘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#兩個矩陣相乘&#34;&gt;#&lt;/a&gt; 兩個矩陣相乘&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

// 函式：矩陣相乘
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrixMultiply(const vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix1, const vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix2) &amp;#123;
    int rows1 = matrix1.size();    // 矩陣1的列數
    int cols1 = matrix1[0].size(); // 矩陣1的行數（矩陣2的列數）
    int cols2 = matrix2[0].size(); // 矩陣2的行數

    // 建立結果矩陣，初始化為全0
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result(rows1, vector&amp;lt;int&amp;gt;(cols2, 0));

    // 進行矩陣相乘運算
    for (int i = 0; i &amp;lt; rows1; i++) &amp;#123;
        for (int j = 0; j &amp;lt; cols2; j++) &amp;#123;
            for (int k = 0; k &amp;lt; cols1; k++) &amp;#123;
                result[i][j] += matrix1[i][k] * matrix2[k][j];
            &amp;#125;
        &amp;#125;
    &amp;#125;

    return result;
&amp;#125;

int main() &amp;#123;
    // 定義兩個矩陣
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrix1 = &amp;#123;&amp;#123;1, 2&amp;#125;, &amp;#123;3, 4&amp;#125;&amp;#125;;
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrix2 = &amp;#123;&amp;#123;5, 6&amp;#125;, &amp;#123;7, 8&amp;#125;&amp;#125;;

    // 呼叫矩陣相乘函式
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result = matrixMultiply(matrix1, matrix2);

    // 輸出結果矩陣
    cout &amp;lt;&amp;lt; &amp;quot;矩陣相乘的結果：&amp;quot; &amp;lt;&amp;lt; endl;
    for (const auto&amp;amp; row : result) &amp;#123;
        for (const auto&amp;amp; element : row) &amp;#123;
            cout &amp;lt;&amp;lt; element &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
        &amp;#125;
        cout &amp;lt;&amp;lt; endl;
    &amp;#125;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;矩陣乘向量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩陣乘向量&#34;&gt;#&lt;/a&gt; 矩陣乘向量&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

// 計算矩陣與向量的乘積
vector&amp;lt;double&amp;gt; matrixVectorMultiply(const vector&amp;lt;vector&amp;lt;double&amp;gt;&amp;gt;&amp;amp; matrix, const vector&amp;lt;double&amp;gt;&amp;amp; vector) &amp;#123;
    int rows = matrix.size();
    int cols = matrix[0].size();

    // 檢查矩陣與向量的尺寸是否符合乘法規則
    if (cols != vector.size()) &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;矩陣與向量的尺寸不符合乘法規則&amp;quot; &amp;lt;&amp;lt; endl;
        return vector&amp;lt;double&amp;gt;();
    &amp;#125;

    // 創建結果向量，初始化為零
    vector&amp;lt;double&amp;gt; result(rows, 0.0);

    // 進行矩陣與向量的乘法
    for (int i = 0; i &amp;lt; rows; i++) &amp;#123;
        for (int j = 0; j &amp;lt; cols; j++) &amp;#123;
            result[i] += matrix[i][j] * vector[j];
        &amp;#125;
    &amp;#125;

    return result;
&amp;#125;

// 測試程式碼
int main() &amp;#123;
    // 定義矩陣
    vector&amp;lt;vector&amp;lt;double&amp;gt;&amp;gt; matrix = &amp;#123;&amp;#123;1, 2, 3&amp;#125;,
                                     &amp;#123;4, 5, 6&amp;#125;,
                                     &amp;#123;7, 8, 9&amp;#125;&amp;#125;;

    // 定義向量
    vector&amp;lt;double&amp;gt; vector = &amp;#123;1, 2, 3&amp;#125;;

    // 計算矩陣與向量的乘積
    vector&amp;lt;double&amp;gt; result = matrixVectorMultiply(matrix, vector);

    // 輸出結果
    cout &amp;lt;&amp;lt; &amp;quot;乘積結果：&amp;quot;;
    for (double value : result) &amp;#123;
        cout &amp;lt;&amp;lt; value &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="程式碼" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8/</id>
        <title>線性代數</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E7%B7%9A%E6%80%A7%E4%BB%A3%E6%95%B8/"/>
        <content type="html">&lt;h1 id=&#34;求法向量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求法向量&#34;&gt;#&lt;/a&gt; 求法向量&lt;/h1&gt;
&lt;p&gt;要求一個平面或線的法向量，可以使用幾何或向量運算的方法。法向量是與該平面或線垂直的向量。&lt;/p&gt;
&lt;p&gt;以下是一個簡單的範例來說明如何求一個平面的法向量：&lt;/p&gt;
&lt;p&gt;考慮一個平面的一般方程式：ax + by + cz + d = 0&lt;/p&gt;
&lt;p&gt;根據這個方程式，我們可以觀察到，係數 a、b 和 c 對應於平面的法向量的 x、y 和 z 分量。&lt;/p&gt;
&lt;p&gt;因此，平面的法向量是 N = (a, b, c)。&lt;/p&gt;
&lt;p&gt;這樣，我們就找到了平面的法向量。&lt;/p&gt;
&lt;h1 id=&#34;線性獨立&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#線性獨立&#34;&gt;#&lt;/a&gt; 線性獨立&lt;/h1&gt;
&lt;p&gt;在線性代數中，線性獨立是指一組向量或一組函數的集合，其中沒有一個向量或函數可以表示為其他向量或函數的線性組合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;換句話說，如果一組向量或函數中的每個成員都 &lt;code&gt;無法由其他成員線性組出&lt;/code&gt; ，則該組向量或函數是線性獨立的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是一個簡單的範例來說明線性獨立的概念：&lt;/p&gt;
&lt;p&gt;考慮二維平面上的兩個向量 v₁ = (1, 0) 和 v₂ = (0, 1)。這兩個向量分別表示 x 軸和 y 軸的單位向量，它們是正交的並且長度為 1。&lt;br /&gt;
現在，我們嘗試用這兩個向量的線性組合來表示另一個向量 v₃ = (2, 3)。假設存在標量 a 和 b，使得 av₁ + bv₂ = v₃。&lt;br /&gt;
將上述等式展開，我們可以得到以下方程組：&lt;br /&gt;
a(1, 0) + b(0, 1) = (2, 3)&lt;br /&gt;
 將方程組分解為兩個方程：&lt;br /&gt;
a = 2&lt;br /&gt;
b = 3&lt;br /&gt;
 從上面的方程組可以看出，無法找到滿足 a 和 b 的值，使得 av₁ + bv₂ = v₃ 成立。因此，向量 v₃ 無法由向量 v₁ 和 v₂ 的線性組合表示，因此這組向量 {v₁, v₂, v₃} 是線性獨立的。&lt;/p&gt;
&lt;h1 id=&#34;餘弦相似&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#餘弦相似&#34;&gt;#&lt;/a&gt; 餘弦相似&lt;/h1&gt;
&lt;p&gt;餘弦相似（Cosine Similarity）是一種衡量兩個向量之間相似性的度量方法。它基於餘弦定理，通過計算兩個向量之間的夾角來評估它們的相似度。餘弦相似的取值範圍在 -1 到 1 之間，其中值越接近 1，表示兩個向量越相似；值越接近 -1，表示兩個向量越不相似；值為 0 表示兩個向量之間沒有相似性。&lt;/p&gt;
&lt;p&gt;以下是一個簡單的範例來說明餘弦相似的計算：&lt;/p&gt;
&lt;p&gt;假設有兩個二維向量 v₁ = (1, 2) 和 v₂ = (3, 4)。&lt;/p&gt;
&lt;p&gt;首先，計算這兩個向量的內積（dot product）：&lt;br /&gt;
v₁ · v₂ = (1 * 3) + (2 * 4) = 3 + 8 = 11&lt;/p&gt;
&lt;p&gt;接下來，計算每個向量的長度（歐幾里得範數）：&lt;br /&gt;
||v₁|| = √(1² + 2²) = √5 ≈ 2.236&lt;br /&gt;
||v₂|| = √(3² + 4²) = √25 = 5&lt;/p&gt;
&lt;p&gt;然後，計算餘弦相似度：&lt;br /&gt;
similarity = v₁ · v₂ / (||v₁|| * ||v₂||) = 11 / (2.236 * 5) ≈ 0.984&lt;/p&gt;
&lt;p&gt;從上述計算結果可以看出，這兩個向量的餘弦相似度約為 0.984，接近於 1，表示它們在方向上非常相似。&lt;/p&gt;
&lt;p&gt;總結：&lt;br /&gt;
餘弦相似是一種用於衡量兩個向量之間相似性的度量方法。它基於餘弦定理，通過計算兩個向量之間的夾角來評估它們的相似度。餘弦相似的取值範圍在 -1 到 1 之間，值越接近 1 表示兩個向量越相似，值越接近 -1 表示兩個向量越不相似，值為 0 表示兩個向量之間沒有相似性。餘弦相似性常用於文本相似度計算、推薦系統、資訊檢索等領域。&lt;/p&gt;
&lt;h1 id=&#34;一個方陣要怎麼求反矩陣&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一個方陣要怎麼求反矩陣&#34;&gt;#&lt;/a&gt; 一個方陣要怎麼求反矩陣&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;高斯 - 喬登消去法（Gaussian-Jordan elimination）&lt;br /&gt;
a. 將右邊放上基本矩陣&lt;br /&gt;
&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;[&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.16em&#34; columnalign=&#34;center center center center center center&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;
\begin{bmatrix}
 a &amp;amp; b &amp;amp; c &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \\
 d &amp;amp; f &amp;amp; g &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \\
 h &amp;amp; i &amp;amp; j &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 
\end{bmatrix}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:3.6em;vertical-align:-1.55em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:5.6em;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;width:0.667em;height:3.600em;&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#39;0.667em&#39; height=&#39;3.600em&#39; viewBox=&#39;0 0 667 3600&#39;&gt;&lt;path d=&#39;M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v0 v1759 h84z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:5.6em;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;width:0.667em;height:3.600em;&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#39;0.667em&#39; height=&#39;3.600em&#39; viewBox=&#39;0 0 667 3600&#39;&gt;&lt;path d=&#39;M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v0 v1759 h84z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;b. 將左邊做列運算至基本矩陣&lt;br /&gt;
 c. 可得右邊為反矩陣&lt;br /&gt;
&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;[&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.16em&#34; columnalign=&#34;center center center center center center&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mo stretchy=&#34;false&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;?&lt;/mo&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;
\begin{bmatrix}
  1 &amp;amp; 0 &amp;amp; 0 &amp;amp; ? &amp;amp; ? &amp;amp; ? \\
  0 &amp;amp; 1 &amp;amp; 0 &amp;amp; ? &amp;amp; ? &amp;amp; ? \\
  0 &amp;amp; 0 &amp;amp; 1 &amp;amp; ? &amp;amp; ? &amp;amp; ? 
\end{bmatrix}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:3.6em;vertical-align:-1.55em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:5.6em;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;width:0.667em;height:3.600em;&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#39;0.667em&#39; height=&#39;3.600em&#39; viewBox=&#39;0 0 667 3600&#39;&gt;&lt;path d=&#39;M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v0 v1759 h84z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.01em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.81em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:5.6em;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;width:0.667em;height:3.600em;&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#39;0.667em&#39; height=&#39;3.600em&#39; viewBox=&#39;0 0 667 3600&#39;&gt;&lt;path d=&#39;M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v0 v1759 h84z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;矩陣的伴隨矩陣（adjugate matrix）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是一個簡單的範例來說明如何求一個方陣的反矩陣：&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;2x2的求法&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;考慮一個 2x2 的方陣 A：&lt;br /&gt;
&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;[&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.16em&#34; columnalign=&#34;center center&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;
A =
\begin{bmatrix}
a &amp;amp; b \\
c &amp;amp; d 
\end{bmatrix}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.4em;vertical-align:-0.95em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.41em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.95em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.41em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.95em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先，計算方陣 A 的行列式（determinant）：&lt;br /&gt;
det(A) = ad - bc&lt;/p&gt;
&lt;p&gt;接下來，計算方陣 A 的伴隨矩陣（adjugate matrix） B：&lt;br /&gt;
&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.16em&#34; columnalign=&#34;center center&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;
B =
\begin{matrix}
d &amp;amp; -b \\
-c &amp;amp; a
\end{matrix}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6833em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.4em;vertical-align:-0.95em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.41em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.95em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.41em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.95em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最後，計算反矩陣（inverse matrix） A⁻¹：&lt;br /&gt;
A⁻¹ = (1/det(A)) * B&lt;br /&gt;
= (1/(ad - bc)) * &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mtable rowspacing=&#34;0.16em&#34; columnalign=&#34;center center&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;
\begin{matrix}
d &amp;amp; -b \\
-c &amp;amp; a
\end{matrix}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.4em;vertical-align:-0.95em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.41em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.95em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;arraycolsep&#34; style=&#34;width:0.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.41em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.95em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
</content>
        <category term="線性代數" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/</id>
        <title>資料結構</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/"/>
        <content type="html">&lt;h1 id=&#34;circular-queue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#circular-queue&#34;&gt;#&lt;/a&gt; Circular Queue&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-Mermaid&#34;&gt;
graph LR
    A[A] --&amp;gt; B[B]
    B --&amp;gt; C[C]
    C --&amp;gt; D[D]
    D --&amp;gt; A[A]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一般的隊列（Queue）:FIFO&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Queue&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Circular Queue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;資料排列方式&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;線性順序排列&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;循環順序排列，即將尾端和前端連接起來&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;插入和刪除操作&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;刪除操作都在前端進行&lt;br&gt;插入操作都在尾端進行&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;插入和刪除操作不固定&lt;br&gt;可以在任何位置進行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;記憶體空間&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;更多&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;較少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;效率&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;低&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;dfs-and-bfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dfs-and-bfs&#34;&gt;#&lt;/a&gt; DFS and BFS&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;深度優先搜尋 (Depth-First Search, DFS)&lt;/strong&gt; 是一種用於搜尋圖或樹數據結構中所有頂點的遞迴演算法。&lt;/p&gt;
&lt;p&gt;例如，假設我們有一個圖 G，它的節點是 {0, 1, 2, 3}，邊是 {(0, 1), (0, 2), (1, 2), (2, 0), (2, 3), (3, 3)}。我們可以從節點 2 開始進行深度優先搜尋。首先，我們訪問節點 2，然後將其相鄰的未訪問節點（0 和 3）放入堆疊。接著，我們訪問堆疊頂部的節點（0），並將其相鄰的未訪問節點（1）放入堆疊。然後，我們訪問堆疊頂部的節點（1），並將其相鄰的未訪問節點（2）放入堆疊。最後，我們訪問堆疊頂部的節點（3）。由於沒有更多的未訪問節點，所以我們的深度優先搜尋結束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;廣度優先搜尋 (Breadth-First Search, BFS)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 BFS 中，從起點節點開始，逐層地擴展搜索，先探索所有與起點節點相鄰的節點，然後再逐層探索與這些節點相鄰的節點，以此類推。&lt;/p&gt;
&lt;p&gt;BFS 使用一個稱為 ** 佇列（Queue）** 的資料結構來維護待處理的節點。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;將起點節點放入佇列中。&lt;/li&gt;
&lt;li&gt;從佇列中取出一個節點，將其標記為已訪問，並擴展搜索到該節點相鄰的未訪問節點，將這些節點加入佇列中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;重複&lt;/strong&gt;這個過程，直到佇列中沒有未訪問的節點為止。&lt;/p&gt;
&lt;p&gt;BFS 的特點是以&lt;strong&gt;廣度&lt;/strong&gt;作為搜索的優先順序。也就是說，BFS 先搜索距離起點節點最近的節點，然後再搜索稍遠一些的節點。這意味著，當使用 BFS 搜索時，可以找到從起點到目標節點的最短路徑（如果存在）。&lt;/p&gt;
&lt;p&gt;BFS 可以用在圖形算法、迷宮解決、最短路徑問題等。它確保在搜索過程中先處理較近的節點，因此通常用於找尋最短路徑或尋找圖形中的最短距離。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DFS&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;BFS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;使用的資料結構&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Stack&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Quene&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;順序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不唯一 (若 vertex 從小到大拜訪則唯一)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不唯一&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;雜湊函數-hash-function&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#雜湊函數-hash-function&#34;&gt;#&lt;/a&gt; 雜湊函數 (Hash Function)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;雜湊函數 (Hash Function)&lt;/strong&gt; 是一種數學函數，它將任意大小的輸入數據（稱為 “資料”）轉換為固定大小的輸出字串（稱為 “雜湊值”）。&lt;/p&gt;
&lt;p&gt;例如我們將  &lt;code&gt;Hello World!&lt;/code&gt;  的字串分別用 MD5、SHA1、SHA256&lt;br /&gt;
MD5:  &lt;code&gt;ed076287532e86365e841e92bfc50d8c&lt;/code&gt; &lt;br /&gt;
SHA1:  &lt;code&gt;2ef7bde608ce5404e97d5f042f95f89f1c232871&lt;/code&gt; &lt;br /&gt;
SHA256:  &lt;code&gt;7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雜湊函數會希望是不可逆&lt;/li&gt;
&lt;li&gt;雜湊函數可能會有相同的情況 (碰撞)&lt;/li&gt;
&lt;li&gt;原始資料有小變動，則希望雜湊值更大的變化&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="資料結構" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E9%9B%A2%E6%95%A3%E6%95%B8%E5%AD%B8/</id>
        <title>離散數學</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E9%9B%A2%E6%95%A3%E6%95%B8%E5%AD%B8/"/>
        <content type="html">&lt;h1 id=&#34;背包問題&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背包問題&#34;&gt;#&lt;/a&gt; 背包問題&lt;/h1&gt;
&lt;p&gt;背包問題（Knapsack Problem）是一個經典的優化問題，屬於組合優化問題的一種，有一個固定容量的背包和一組具有不同價值和重量的物品，我們需要在限制背包容量的條件下，選擇最佳的物品組合，使得&lt;strong&gt;總價值最大化&lt;/strong&gt;，可以使用&lt;strong&gt;動態規劃&lt;/strong&gt;、&lt;strong&gt;貪婪算法&lt;/strong&gt;來找到最佳解。&lt;/p&gt;
&lt;p&gt;背包問題可以分為兩種主要的變體：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0/1 背包問題（0/1 Knapsack Problem）：每個物品要麼全部放入背包，要麼完全不放入背包，&lt;strong&gt;無法將物品分割&lt;/strong&gt;為部分放入。&lt;/li&gt;
&lt;li&gt;分數背包問題（Fractional Knapsack Problem）：每個物品&lt;strong&gt;可以按比例分割&lt;/strong&gt;，可以將物品的一部分放入背包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假設有一個可放入總重量為 10 的背包，我們有以下物品可供選擇：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物品 1：價值 60，重量 4，價值 / 重量 = 15&lt;/li&gt;
&lt;li&gt;物品 2：價值 80，重量 5，價值 / 重量 = 16&lt;/li&gt;
&lt;li&gt;物品 3：價值 100，重量 8，價值 / 重量 = 12.5&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;0/1 背包問題：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最佳的物品組合是將物品 2 和物品 1 放入背包，總價值為 140。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;分數背包問題：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最佳的物品組合是將物品 2 和物品 1 完全放入背包，物品 3 的一部分（重量為 1）放入背包，總價值為 152.5。&lt;br /&gt;
這是因為物品 2 的價值重量比最高，而物品 1 的價值重量比次之，物品 3 的價值重量比最低，&lt;br /&gt;
因此我們先選取物品 2 和物品 1，再選取物品 3 的一部分。&lt;/p&gt;
&lt;h1 id=&#34;尤拉函數&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尤拉函數&#34;&gt;#&lt;/a&gt; 尤拉函數&lt;/h1&gt;
&lt;p&gt;尤拉函數（Euler&#39;s function），也稱為歐拉函數或歐拉 φ 函數。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用來計算小於或等於給定正整數的自然數中與該正整數 &lt;code&gt;互質&lt;/code&gt; 的數的個數。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尤拉函數的符號表示為 φ(n)，其中 n 是一個正整數。&lt;br /&gt;
尤拉函數的計算方法基於歐拉定理，它指出若 a 和 n 是互質的正整數，則 a 的尤拉函數值 φ(n) 等於小於或等於 n 的正整數中與 n 互質的數的個數。&lt;/p&gt;
&lt;p&gt;範例：&lt;/p&gt;
&lt;p&gt;假設我們要計算 φ(8)。首先，列出小於或等於 8 的正整數：1、2、3、4、5、6、7、8。&lt;br /&gt;
然後，我們找出與 8 互質的數，即與 8 沒有共同因數的數。&lt;br /&gt;
在這個例子中，與 8 互質的數有：1、3、5、7。因此，φ(8) = 4，表示小於或等於 8 的正整數中，有 4 個與 8 互質的數。&lt;/p&gt;
</content>
        <category term="離散數學" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E9%A1%8C%E7%9B%AE/</id>
        <title>程式題目</title>
        <link rel="alternate" href="https://blog.minz.li/%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%9B%AE/%E9%A1%8C%E7%9B%AE/"/>
        <content type="html">&lt;h1 id=&#34;印星星&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#印星星&#34;&gt;#&lt;/a&gt; 印星星&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

void printUpperTriangle(int n) &amp;#123;
    for (int i = 0; i &amp;lt; n; i++) &amp;#123;
        for (int j = 0; j &amp;lt;= i; j++) &amp;#123;
            cout &amp;lt;&amp;lt; &amp;quot;* &amp;quot;;
        &amp;#125;
        cout &amp;lt;&amp;lt; endl;
    &amp;#125;
&amp;#125;

void printLowerTriangle(int n) &amp;#123;
    for (int i = n; i &amp;gt; 0; i--) &amp;#123;
        for (int j = 0; j &amp;lt; i; j++) &amp;#123;
            cout &amp;lt;&amp;lt; &amp;quot;* &amp;quot;;
        &amp;#125;
        cout &amp;lt;&amp;lt; endl;
    &amp;#125;
&amp;#125;

int main() &amp;#123;
    int n;
    cout &amp;lt;&amp;lt; &amp;quot;請輸入行數: &amp;quot;;
    cin &amp;gt;&amp;gt; n;

    cout &amp;lt;&amp;lt; &amp;quot;上三角形：&amp;quot; &amp;lt;&amp;lt; endl;
    printUpperTriangle(n);

    cout &amp;lt;&amp;lt; &amp;quot;下三角形：&amp;quot; &amp;lt;&amp;lt; endl;
    printLowerTriangle(n);

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;用遞迴寫階乘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用遞迴寫階乘&#34;&gt;#&lt;/a&gt; 用遞迴寫階乘&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

// 定義遞迴函式計算階乘
int factorial(int n) &amp;#123;
    // Base case: 當 n 為 0 或 1 時，階乘為 1
    if (n == 0 || n == 1) &amp;#123;
        return 1;
    &amp;#125;
    // 遞迴呼叫：將問題分解為較小的子問題
    // 階乘 n 可以表示為 n 乘上 (n-1) 的階乘
    return n * factorial(n - 1);
&amp;#125;

int main() &amp;#123;
    int num;
    cout &amp;lt;&amp;lt; &amp;quot;請輸入一個正整數: &amp;quot;;
    cin &amp;gt;&amp;gt; num;

    // 呼叫遞迴函式計算階乘
    int result = factorial(num);

    cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; &amp;quot; 的階乘是: &amp;quot; &amp;lt;&amp;lt; result &amp;lt;&amp;lt; endl;

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;找出陣列中第二大的數字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找出陣列中第二大的數字&#34;&gt;#&lt;/a&gt; 找出陣列中第二大的數字&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int findSecondLargest(int arr[], int size) &amp;#123;
    int largest = INT_MIN;  // 初始化最大值為int類型的最小值
    int secondLargest = INT_MIN;  // 初始化第二大值為int類型的最小值

    // 遍歷數組，更新最大值和第二大值
    for (int i = 0; i &amp;lt; size; i++) &amp;#123;
        if (arr[i] &amp;gt; largest) &amp;#123;
            secondLargest = largest;
            largest = arr[i];
        &amp;#125; else if (arr[i] &amp;gt; secondLargest &amp;amp;&amp;amp; arr[i] != largest) &amp;#123;
            secondLargest = arr[i];
        &amp;#125;
    &amp;#125;

    return secondLargest;
&amp;#125;

int main() &amp;#123;
    int arr[] = &amp;#123;5, 2, 9, 1, 7, 4&amp;#125;;  // 範例數組
    int size = sizeof(arr) / sizeof(arr[0]);  // 計算數組大小

    // 調用函數找到第二大的數
    int secondLargest = findSecondLargest(arr, size);

    cout &amp;lt;&amp;lt; &amp;quot;第二大的數字是: &amp;quot; &amp;lt;&amp;lt; secondLargest &amp;lt;&amp;lt; endl;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;給定一數字找出因數&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#給定一數字找出因數&#34;&gt;#&lt;/a&gt; 給定一數字，找出因數&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

using namespace std;

// 找出給定數字的因數
vector&amp;lt;int&amp;gt; findFactors(int num) &amp;#123;
    vector&amp;lt;int&amp;gt; factors;

    // 從 1 開始遍歷到 num 的平方根
    for (int i = 1; i * i &amp;lt;= num; i++) &amp;#123;
        if (num % i == 0) &amp;#123;
            factors.push_back(i); // 將因數 i 加入 factors
            if (i != num / i) &amp;#123;
                factors.push_back(num / i); // 將因數 num/i 加入 factors
            &amp;#125;
        &amp;#125;
    &amp;#125;

    return factors;
&amp;#125;

int main() &amp;#123;
    int num;
    cout &amp;lt;&amp;lt; &amp;quot;請輸入一個正整數：&amp;quot;;
    cin &amp;gt;&amp;gt; num;

    vector&amp;lt;int&amp;gt; factors = findFactors(num);

    cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; &amp;quot; 的因數有：&amp;quot;;
    for (int factor : factors) &amp;#123;
        cout &amp;lt;&amp;lt; factor &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    &amp;#125;
    cout &amp;lt;&amp;lt; endl;

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;判斷質數&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判斷質數&#34;&gt;#&lt;/a&gt; 判斷質數&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cmath&amp;gt;

using namespace std;

// 判斷一個數字是否為質數
bool isPrime(int number) &amp;#123;
    // 負數和小於等於 1 的數字不是質數
    if (number &amp;lt;= 1) &amp;#123;
        return false;
    &amp;#125;

    // 使用平方根的方法進行質數判斷
    // 如果一個數字 n 是合數（非質數）
    // 那麼它必定可以分解為兩個因數 a 和 b
    // 其中 a 和 b 都不大於 sqrt(n)
    int sqrtNumber = sqrt(number);
    for (int i = 2; i &amp;lt;= sqrtNumber; i++) &amp;#123;
        if (number % i == 0) &amp;#123;
            return false;
        &amp;#125;
    &amp;#125;

    // 如果沒有找到能整除 number 的數字，則 number 是質數
    return true;
&amp;#125;

// 測試程式碼
int main() &amp;#123;
    int number;

    cout &amp;lt;&amp;lt; &amp;quot;請輸入一個數字：&amp;quot;;
    cin &amp;gt;&amp;gt; number;

    // 呼叫 isPrime 函式判斷是否為質數
    bool result = isPrime(number);

    // 根據結果輸出訊息
    if (result) &amp;#123;
        cout &amp;lt;&amp;lt; number &amp;lt;&amp;lt; &amp;quot; 是質數&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125; else &amp;#123;
        cout &amp;lt;&amp;lt; number &amp;lt;&amp;lt; &amp;quot; 不是質數&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;判斷子字串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判斷子字串&#34;&gt;#&lt;/a&gt; 判斷子字串&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

using namespace std;

// 判斷一個字串是否為另一個字串的子字串
bool isSubstring(const string&amp;amp; str, const string&amp;amp; substring) &amp;#123;
    // 如果子字串長度大於原始字串，則直接返回 false
    if (substring.length() &amp;gt; str.length()) &amp;#123;
        return false;
    &amp;#125;

    // 遍歷原始字串，逐個比較字元
    for (size_t i = 0; i &amp;lt;= str.length() - substring.length(); i++) &amp;#123;
        bool isMatch = true;

        // 檢查子字串是否匹配
        for (size_t j = 0; j &amp;lt; substring.length(); j++) &amp;#123;
            if (str[i + j] != substring[j]) &amp;#123;
                isMatch = false;
                break;
            &amp;#125;
        &amp;#125;

        // 如果子字串匹配，則返回 true
        if (isMatch) &amp;#123;
            return true;
        &amp;#125;
    &amp;#125;

    // 沒有找到匹配的子字串，返回 false
    return false;
&amp;#125;

// 測試程式碼
int main() &amp;#123;
    string str, substring;

    cout &amp;lt;&amp;lt; &amp;quot;請輸入一個字串：&amp;quot;;
    getline(cin, str);

    cout &amp;lt;&amp;lt; &amp;quot;請輸入一個子字串：&amp;quot;;
    getline(cin, substring);

    // 呼叫 isSubstring 函式判斷是否為子字串
    bool result = isSubstring(str, substring);

    // 根據結果輸出訊息
    if (result) &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;\\&amp;quot;&amp;quot; &amp;lt;&amp;lt; substring &amp;lt;&amp;lt; &amp;quot;\\&amp;quot; 是 \\&amp;quot;&amp;quot; &amp;lt;&amp;lt; str &amp;lt;&amp;lt; &amp;quot;\\&amp;quot; 的子字串&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125; else &amp;#123;
        cout &amp;lt;&amp;lt; &amp;quot;\\&amp;quot;&amp;quot; &amp;lt;&amp;lt; substring &amp;lt;&amp;lt; &amp;quot;\\&amp;quot; 不是 \\&amp;quot;&amp;quot; &amp;lt;&amp;lt; str &amp;lt;&amp;lt; &amp;quot;\\&amp;quot; 的子字串&amp;quot; &amp;lt;&amp;lt; endl;
    &amp;#125;

    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;使用迴圈逐個比較字元的方式來實現。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;檢查子字串的長度是否大於原始字串的長度，如果是，則直接返回 false，因為子字串不可能是原始字串的子字串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用兩個嵌套的迴圈。外層迴圈遍歷原始字串，內層迴圈檢查從當前位置開始的子字串是否匹配。如果在內層迴圈中找到了不匹配的字元，則設置  &lt;code&gt;isMatch&lt;/code&gt;  為 false，並且跳出內層迴圈。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="程式碼" />
        <updated>2023-11-01T16:00:00.000Z</updated>
    </entry>
</feed>
